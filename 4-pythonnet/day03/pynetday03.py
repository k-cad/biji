一.IO
    【1】定义:在内存中存在数据交换的操作认为是IO操作
        e.g 和终端交互: input print
            和磁盘交互:　read write
            和网络交互:　recv send
        IO密集型程序:在程序执行中有大量IO操作,而cpu运算较少,
        消耗cpu较少,耗时长

        计算密集型程序:程序运行中计算较多,IO操作相对较少.
        cpu消耗多,执行速度快,几乎没有阻塞.
    【2】IO分类:阻塞IO,非阻塞IO,IO多路复用,异步IO
    【3】阻塞IO
        1.定义:在执行IO操作时如果执行条件不满足则阻塞.
            阻塞IO是IO的默认形态.
        2.效率:阻塞IO是效率很低的一种IO.但是由于逻辑
            简单所以是默认的IO.
        3.阻塞情况:
            *因为某种执行条件没有满足造成的函数阻塞
                e.g. accept input recv
            *处理IO时间较长产生的阻塞状态
           gbk     e.g. 网络传输,大文件读写
    【4】非阻塞IO
        1.定义:通过修改IO属性行为,使原本阻塞的IO变为
            非阻塞的状态    
        2.设置套接字为非阻塞IO
            sockfd.setblocking(bool)
            功能:设置套接字为非阻塞IO
            参数:默认为True，表示套接字IO阻塞;
            　　 设置为False则套接字IO为非阻塞
        3.超时检测:设置一个最长阻塞时间,超过该时间后
            则不再阻塞等待.
            sockfd.settimeout(sec)
            功能:设置套接字的超时时间
            参数:设置的时间
    【5】IO多路复用
        1.定义:同时监控多个IO事件,当哪个事件准备就绪
            就执行哪个IO事件.以此形成可以同时处理多个
            IO的行为,避免一个IO阻塞造成其他IO均无法执行,
            提高了IO执行效率
        2.具体方案
            select方法: windows linux unix
            poll 方法: linux unix
            epoll方法: linux 
        3.python实现IO多路复用
            import select
二.python实现IO多路复用
    1.select方法
        rs,ws,xs=select(rlist,wlist,xlist[,timeout])
        功能:监控IO事件,阻塞等待IO发送
        参数:rlist  列表    存放关注的等待发生的IO事件
        　　 wlist  列表    存放关注的要主动处理的IO事件
        　　 xlist  列表    存放关注的出现异常要处理的IO
        　　 timeout    超时时间
        返回值: rs 列表 rlist中准备就绪的IO
               ws 列表 wilst中准备就绪的IO
               xs 列表 xlist中准备就绪的IO
    2.select 实现TCP服务
        1.将关注的IO放入对应的监控类别列表
        2.通过select函数进行监控
        3.遍历select返回值列表,确定就绪IO事件
        4.处理发送的IO事件

    注意:1.wlist中如果存在IO事件，则select立即返回给ws
        2.处理IO过程中不要出现死循环占用服务端的情况
        3.IO多路复用耗资源少，效率高
四.位运算
    1.定义:将整数转换为二进制,按二进制位进行运算        
    2.运算符号:&    按位与
      　　　　 |    按位或
      　　　　 ^    按位异或
      　　　　 <<   左移
      　　　　 >>   右移
    e.g. 14 --> 01110
         19 --> 10011

         14 & 19 = 00010 = 2  一0则0
         14 | 19 = 11111 = 31 一1则1
         14 ^ 19 = 11101 = 29 相同为0不同为1
         14 << 2 = 111000 = 56 向左移动低位补0
         14 >> 2 = 11 = 3 向右移动去掉低位


作业:
    1.使用select 完成一个服务程序,要求将从客户端发来
      的信息写入一个文件，同时监控服务端的终端输入,将
      输入的内容也写入该文件
    2.丰富http协议的相关内容
    3.复习函数的使用(函数设计,传参)
    