前情回顾

1. tcp传输特征
   * 连接两端一端断开，recv立即返回空字符串，send不能再发送
   * 网络缓冲区
   * 粘包

2. udp套接字编程
   服务端 ： socket --> bind --> recvfrom/sendto --> close
   客户端 ： socket --> sendto/recvfrom --> close

3. socket模块函数和套接字属性
   
   fileno()
   getpeername()
   setsockopt()

4. 广播

5. http协议传输
   * 什么是http协议，应用场景
   * 基于http协议网页访问的大体流程
   * http请求（request）
     请求行 请求头  空行  请求体
     请求行格式： GET   /    HTTP/1.1
   
   * http响应（response）
     响应行  响应头  空行  响应体
     响应行格式 ： HTTP/1.1  200  OK
     响应体：会发给客户端的内容
************************************************************

一. IO

  1. 什么是IO ： 在内存中存在数据交换的操作认为是IO操作
     
     e.g. 和终端交互 ： input  print
          和磁盘交互 ： read  write
	  和网络交互 ： recv  send

     IO密集型程序 ： 在程序执行中存在大量IO操作，而cpu运算较少。消耗cpu资源少，耗时长。

     计算密集型程序 ： 程序运行中计算较多，IO操作相对较少，cpu消耗大，运行速度快，阻塞少。


  2. IO分类 ：阻塞IO   非阻塞IO   IO多路复用

  3. 阻塞IO
    
    【1】定义： 在执行IO操作时如果遇到执行条件不满足的情况则阻塞。阻塞IO是IO的默认形态。

    【2】阻塞情况

       * 因为某种执行条件没有满足造成的函数阻塞
         e.g. accept  input  recv  recvfrom
       
       * 处理IO的时间较长产生的阻塞行为
         e.g. 网络传输，大文件的读写

    【3】阻塞IO是效率很低的一种IO模型，但是逻辑简单，实现容易。

  4. 非阻塞IO
     
    【1】定义 ：通过修改IO的属性行为，使原本阻塞的IO函数变为非阻塞的状态

    【2】设置套接字的非阻塞IO
         
	 sockfd.setblocking(bool)
	 功能: 设置套接字为非阻塞IO
	 参数：如果设置为False则将套接字变为非阻塞
     
    【3】超时检测：设置一个最长阻塞时间，超过该时间后则不在阻塞等待。

        sockfd.settimeout(sec)
	功能: 设置套接字超时时间
	参数：设置的时间


  5. IO多路复用

     【1】. 定义：同时监控多个IO事件，当哪个IO事件准备就绪就交由应用程序执行哪个IO，以此形成可以同时处理多个IO的行为，避免一个IO阻塞造成其他IO均无法执行的情况，提高了效率。

     【2】. 具体实现
      
        select方法 ：windows  linux  unix
	poll 方法： linux  unix
	epoll 方法 ： linux

	python IO多路复用 ： import select


二. python 实现IO多路复用
  
  1. select 方法 

      rs, ws, xs = select(rlist, wlist, xlist[, timeout])
      功能：监控IO事件，阻塞等待IO事件的发生
      参数：rlist  列表  存放关注的被动等待发生的IO事件
      	    wlist  列表  存放关注的可以出动处理的IO事件
	    xlist  列表  存放关注的出错需要处理的IO 
	    timeout  超时时间
      返回值：rs  列表  rlist中准备就绪的IO
	      ws  列表  wlist中准备就绪的IO
	      xs  列表  xlist中准备就绪的IO

  2. select tcp服务端流程： 
     
     1. 将关注的IO放入对应监控列表
     2. 通过select 函数进行监控
     3. 遍历select返回的各个列表，确定就绪的IO事件
     4. 处理发生的IO

     注意： 1. wlist中如果存在IO事件，则select立即将其返回
     	    2. 处理IO的过程中不要长期占有服务端（如死循环）
	    3. IO多路复用消耗资源较少，效率较高


三. 位运算
  
  定义： 将整数转换为二进制，按二进制位进行运算

  运算符号： &   按位与
  	     |   按位或
	     ^   按位异或
	     <<  左移
	     >>  右移
  
  e.g.  14 -->   1110
        19 -->  10011

	14 & 19 = 00010 = 2   一0则0
	14 | 19 = 11111 = 31  一1则1
	14 ^ 19 = 11101 = 29  相同为0不同为1
	14 << 2 = 111000 = 56 向左移动低位补0
	19 >> 2 = 100 = 4     向右移动去掉低位


作业 ： 1. 使用select完成一个服务端程序，要求将从客户端发来		  的信息和终端输入的内容都写入到一个日志文件中。该服	          务端可能链接多个客户端

        2. 复习函数的使用（函数设计，传参）





