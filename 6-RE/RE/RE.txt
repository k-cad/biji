正则表达式

一. 动机

  1. 文本处理已经成为计算机常见工作之一
	2. 对文本内容搜索，定位，提取是逻辑比较复杂的工作
	3. 为了快速方便的解决上述问题，产生了正则表达式技术

二. 简介

  定义：即文本的高级匹配模式，提供搜索，替换等功能。其本质是一系列由字符和特殊符号构成的字串，这个字串即正则表达式

  匹配原理：通过普通字符和有特定含义的字符，来组成字符串，用以描述一定的字符串规则，比如重复，位置等，来表达一种特定类型的字符串，进而匹配。

	目标：1. 熟练掌握正则表达式符号
			  2. 能够读懂常用正则表达式，编辑基本表达式匹配内容
				3. 能够熟练使用re模块操作正则表达式


三. 元字符的使用

  1. 普通字符

	  匹配规则：每个普通字符匹配其对应的字符

		  In [14]: re.findall('ab','abcdefabcda')
			Out[14]: ['ab', 'ab']
		
		注意事项：正则表达式也可以匹配中文
	
	2. 或

	  元字符 ： | 
		匹配规则：匹配 | 两侧任意正则表达式即可

      In [17]: re.findall('ab|ef','abcdefabcda')
			Out[17]: ['ab', 'ef', 'ab']
	
	3. 匹配开始位置

	  元字符： ^
		匹配规则： 匹配目标字符串的开始位置

		  In [21]: re.findall('^Jame','Jame,hello')
			Out[21]: ['Jame']
	
	4. 匹配结束位置

	  元字符 ：$
		匹配规则： 匹配目标字符串的结束位置

      In [24]: re.findall('Jame$','Hi,Jame')
			Out[24]: ['Jame']
		
		注意事项：如果有^和$必然是出现在正则表达式的开始和结尾，如果两者同时出现则表示正则表达式要匹配目标字符串的全部内容。

  5. 匹配任意字符

	  元字符： .
		匹配规则： 匹配除换行外的任意一个字符

			In [32]: re.findall('小.',"小红说小明的成绩不如小王。")
			Out[32]: ['小红', '小明', '小王']
		
  6. 匹配字符集中字符

	  元字符：[字符集]
		匹配规则：匹配字符集中任意一个字符

		表达形式：[#abc好坏] --> 任意一个[]中的字符，a,b,c
		          [0-9][a-z][A-Z]--> 区间内的任意一个字符
							[_#%a-z0-9]-->混合书写，一般区间在后面

      In [37]: re.findall('[aeiou0-9]',"hello 119")
			Out[37]: ['e', 'o', '1', '1', '9']
	
	7. 匹配字符集反集

	  元字符： [^...]
		匹配规则： 匹配除了字符集中的任意一个字符

		  In [40]: re.findall('[^0-9]',"hello 007")
			Out[40]: ['h', 'e', 'l', 'l', 'o', ' ']
  
	8. 匹配重复

	  元字符 ： *
		匹配规则：匹配前面的字符出现0次或者多次

			In [42]: re.findall('ab*',"abbcadefabbbbbb")
			Out[42]: ['abb', 'a', 'abbbbbb']

		注意事项： ab* 当表达b出现0次时是 a 而不是 ab。*与前面的字符作为一个整体表达。
	
	9. 匹配重复

	  元字符 ： +
		匹配规则： 匹配前面的字符出现1次或多次

      In [44]: re.findall('ab+',"abbcadefabbbbbb")
			Out[44]: ['abb', 'abbbbbb']
	
	10. 匹配重复

	  元字符： ？
		匹配规则： 匹配前面的字符出现0次或1次

      In [59]: re.findall('https?',"http,https://abce")
      Out[59]: ['http', 'https']

  11. 匹配重复

	  元字符： {n}
		匹配规则： 匹配前面的字符出现n次

		  [62]:re.findall('[0-9]{3}',"100,12306,10086,10010")
			Out[62]: ['100', '123', '100', '100']
  
	12. 匹配重复

	  元字符 ： {m,n}
		匹配规则：匹配前面的字符出现m--n次

      [63]: re.findall('[_0-9a-zA-Z]{6,8}',"123abcdef")
			Out[63]: ['123abcde']

  
	13. 匹配任意（非）数字字符

	  元字符： \d    \D
		匹配规则：\d 匹配任意数字字符  [0-9]
							\D 匹配任意非数字字符 [^0-9]

      In [66]: re.findall('1\d{10}',"13866495723")
			Out[66]: ['13866495723']

	14. 匹配(非)普通字符
	  
		元字符： \w  \W
		匹配规则：\w 匹配普通字符
							\w 匹配非普通字符
		说明 ：普通字符指 数字 字母 下划线和普通汉字 

			[69]: re.findall('\w+','PORT_1065,Error 44%,下降')
		  Out[69]: ['PORT_1065', 'Error', '44', '下降']

  15. 匹配（非）空字符
	  
		元字符： \s   \S
		匹配规则： \s 匹配任意一个空字符
		           \S 匹配任意一个非空字符
		说明：空字符指 空格  \r  \n  \t  \v  \f 字符

      In [72]: re.findall('\w+\s+\w+','hello   world')
			Out[72]: ['hello   world']
	
	16. 匹配字符串开头结尾位置

	  元字符： \A   \Z
		匹配规则：\A 匹配字符串开头位置 ^
							\Z 匹配字符串结尾位置 $

  17. 匹配（非）单词边界

	  元字符： \b   \B
		匹配规则： \b 匹配单词边界位置
							 \B 匹配非单词边界位置
		说明：单词边界位置指数字字母下划线或汉字和其他字符的交界位置。

		  In [77]: re.findall(r'\Bis\b','This is a test')
			Out[77]: ['is']


	总结
	
	匹配单个字符：.  [...] [^...] \d \D \w \W \s \S
	匹配重复： *  +  ?  {n}  {m,n}
	匹配位置： ^  $  \A  \Z  \b  \B
	其他：|  ()  \


四. 正则表达式转义

  1. 特殊符号：. * + ? ^ $ [] () {} |  \

  2. 如果在正则表达式中匹配特殊字符，则需要加转义
	   
		 In [87]: re.findall('\$\d+','$100')
		 Out[87]: ['$100']

  3. raw字符串的使用

	   python字符串 --> 正则 -->  目标字符串
		  "\\$\\d+"      \$\d+        "$100"
			r"\$\d+"
		
		* 为了避免特殊字符在字符串中使用时转义的麻烦，经常使用raw字符串表达正则表达式。


五. 贪婪 与 非贪婪

  贪婪模式：正则表达式的重复匹配总是尽可能向后匹配更多的内容。比如：*   +   ？  {m,n}

	非贪婪(懒惰)模式：满足重复条件即不向后匹配更多内容

	贪婪--》非贪婪： *？  +？  ??  {m,n}?

    In [109]: re.findall(r'a.*?b','acdb,aiob,aedb')
		Out[109]: ['acdb', 'aiob', 'aedb']


六. 正则表达式分组

  定义： 使用()可以为正则表达式建立内部分组，子组是正则表达式的一个内部整体。

	作用：1. 可以被作为整体操作，改变某些元字符操作对象
	  
		      In [115]:    re.search(r'\w+\.(Green|Lei)','Jame.Lei').group()
					Out[115]: 'Jame.Lei'

					In [112]: re.search(r'(ab)+','ababababababab').group()
					Out[112]: 'ababababababab'
				
				2. 可以单独获取匹配内容中子组对应内容
				  In [118]: re.search(r'(http|https|ftp|file)://\S+','file://xxxxxx').group(1)
					Out[118]: 'file'

  3. 子组命名 (捕获组)

	   格式：(?P<name>pattern)
		   
				re.search(r'(?P<pig>ab)cd(ef)','abcdefgh').group('pig')
		
		 作用：名称可以表达一定的含义，也可以通过名称获取组内容
	
	4. 注意事项
	  【1】 一个正则表达式中可以有多个子组
		【2】 子组的作用前提是正则表达式能够匹配到内容
		【3】 子组一般从外到内，从左到右计数
		【4】 子组不要重叠，也不要过多嵌套
		
六. 正则表达式匹配原则

  1. 正确性，能够正确的匹配出目标字符串
	2. 排他性，除了目标内容，尽可能不会匹配到其他内容
	3. 全面性，尽可能对目标字符串考虑全面，做到不遗漏


七. Python re模块使用

  regex = compile(pattern,flags=0)
	功能：生成正则表达式对象
	参数：pattern  正则表达式
				flags  功能标识，扩展正则匹配功能
	返回值：正则对象

	re.findall(pattern,string,flags=0)
	功能：通过正则表达式匹配目标字符串内容
	参数：pattern 正则表达式
				string 目标字符串
	返回值： 返回匹配到的内容列表，如果正则表达式存在子组则只返回子组对应的内容。


	regex.findall(string,pos,endpos)
	功能：通过正则表达式匹配目标字符串内容
	参数：string  目标字符串
				pos 截取字符串开始位置，默认表示字符串开头
				endpos  截取字符串结束位置，默认为字符串结尾
	返回值： 返回匹配到的内容列表，如果正则表达式存在子组则只返回子组对应的内容。

	re.split(pattern,string,flags=0)
	功能：使用正则表达式匹配内容切割字符串
	参数：pattern 正则
				string  目标字符串
	返回值： 切割后的字符串列表

	re.sub(pattern,replace,string,max,flags=0)
	功能: 使用指定字符串替换正则表达式匹配内容
	参数：pattern  正则
				replace  指定字符串
				string   目标字符串
				max      最多替换几处，默认全部替换
	返回值： 替换后的字符串


  re.subn() ： 功能参数同sub，返回值多一个实际替换个数

	re.finditer(pattern,string,flags=0)
	功能：使用正则表达式匹配目标内容
	参数：pattern 正则
				string  目标字符串
	返回值 ：迭代对象

  re.fullmatch(pattern,string,flags=0)
	功能：完全匹配某个目标字符串
	参数：pattern 正则
				string  目标字符串
	返回值：匹配内容match object

	
	re.match(pattern,string,flags=0)
	功能：匹配某个目标字符串开始位置
	参数：pattern 正则
				string  目标字符串
	返回值：匹配内容match object
 
  re.search(pattern,string,flags=0)
	功能：匹配目标字符串第一个符合内容
	参数：pattern 正则
				string  目标字符串
	返回值：匹配内容match object

  compile对象属性
	  
		【1】 flags ： flags值
		【2】 pattern ： 正则表达式
		【3】 groups ： 子组数量
		【4】 groupindex ： 捕获组名与组序号的字典

 
作业： 1. 熟练掌握正则表达式元字符
			 2. 将re模块调用函数使用regex对象操作练习
			 3. 找一个文档完成如下操作
			   【1】 找到所有大写字母开头的单词
				 【2】 找到其中所有数字，数字包含整数，小数，分数，百分数，负数 （123 1.23 -1.5 -6 45% 1/2）
				 【3】 将所有日期格式2019-1-23变为2019.1.23

*******************************************************
复习：

  1. 什么是正则表达式
	2. 元字符
	3. 正则表达式的转义，贪婪，分组
	4. 正则表达式匹配原则
	5. re模块使用
		   re模块调用
       compile对象调用
			 match对象调用
******************************************************
一. match对象的属性方法

  1. 属性变量
	   
		 pos   匹配的目标字符串开始位置
		 endpos  匹配的目标字符串结束位置
		 re     正则表达式
		 string  目标字符串
		 lastgroup  最后一组的名称
		 lastindex  最后一组的序号
	
	2. 属性方法
	   
		 span()  获取匹配内容的起止位置
		 start() 获取匹配内容的开始位置
		 end()   获取匹配内容的结束位置
		
		 groupdict()  获取捕获组字典，组名为键，对应内容为值
		 groups() 获取子组对应内容

		 group(n = 0)
		 功能：获取match对象匹配内容
		 参数：默认为0表示获取整个match对象内容
					 如果是序列号或者组名则表示获取对应子组内容
		 返回值：匹配字符串


二. flags参数扩展

  1. 使用函数：re模块调用的匹配函数
	   如：re.compile,re.findall,re.search....

	2. 作用：扩展丰富正则表达式的匹配功能

	3. 常用flag
	  
		A == ASCII  元字符只能匹配ascii码
		I == IGNORECASE  匹配忽略字母大小写
		S == DOTALL  使 . 可以匹配换行
		M == MULTILINE  使 ^  $可以匹配每一行的开头结尾位置
		X == VERBOSE  为正则添加注释
	
	4. 使用多个flag
	  
		方法：按位或连接 
		  e.g. ：  flags = re.I | re.A



















