课程：MySQL关系型数据库
进度：day2

上次内容回顾
1. 基本概念
  1）数据库：数据的仓库(不能直接说成
    数据仓库), 按照一定的理论模型进行
    数据存取的软硬件集合
  2）数据库管理系统：专门用于数据管理
    的软件系统
  3）数据管理三个阶段
    - 人工管理：数据不能共享
    - 文件管理：速度慢，数据联系弱
    - 数据库管理
  4）数据库概念模型
    - 层次模型
    - 网状模型
    - 关系模型：使用关系表示数据、数据
      间的联系
    - 非关系模型
	
2. 关系模型重要概念	
  1）关系：规范的二维表（列不可再分，
    行的次序不重要）
  2）实体：现实中可以区分的事物
  3）元组：关系中的一行（记录），每个
     元组描述的是一个实体信息
  4）属性：关系中的一列，记录的是实体的
    某个数据特征
  5）键：可以区分实体的属性或属性组合
  6）主键：关系中从逻辑上唯一区分实体
     的依据，非空、唯一
	 
3. MySQL服务器管理
  1）启动：/etc/init.d/mysql start  
  2）停止：/etc/init.d/mysql stop
  3）查看状态：/etc/init.d/mysql status
     查看端口：netstat -an | grep 3306
  4）重启：/etc/init.d/mysql restart

4. 库管理：
  1）查看库：show databases;
  2）进入/切换库：use 库名;
  3）查看当前所在库：select database();
  4）创建库：
     create database 库名
	 [default charset=字符集];  
  5）查看建库语句：
     show create database 库名;

5. 表管理
  1）创建表
    create table 表名(
	  字段1  类型(长度),
	  字段2  类型(长度),
	  ......
	);
  2）查看表结构：desc 表名;
  3）查看建表语句：show create table 表名;

6. 数据操作
  1）新增
    insert into orders 
	values('201801010001','C0001',
	       now(),1,1,100.00);
	insert into orders(order_id,cust_id)
	values('201801010001','C0001');
	
	insert into orders (order_id,cust_id)
	values ('201801010001','C0001'),
	       ('201801010002','C0002');
  2）查询
    select * from orders;
	select order_id,cust_id from orders;
	select * from orders 
	where order_id = '201801010002';
	
	select * from orders
	where order_id = '201801010002'
	and status = 1;  -- or满足其中一个

今天的内容

一、数据操作（续）
1. 修改数据	
1）语法
   update 表名
      set 字段1 = 值1,
	      字段2 = 值2,
		  ......
	where 条件表达式;
2）示例
  示例1：修改某个订单状态
    update orders
	set status = 2
	where order_id = '201801010001';
	
  示例2：修改某个订单的金额、状态
    update orders 
	set amt = amt - 20,
	    status = 2
	where order_id = '201801010001';
3）注意事项
  - 修改一定要严格限制条件
  - 设置的值要和字段类型匹配
  - 如果没有匹配的数据，修改为0行

2. 删除
1）语法
   delete from 表名 where 条件表达式;
2）示例：删除订单编号为201801010002
   的数据
   delete from orders 
   where order_id = '201801010002'; 
3）注意事项
  - 条件进行严格限制
  - 真实项目中，删除之前必须做备份  
  
二、MySQL数据类型

1. 常见信息种类
1）数值类型
2）字符串
3）日期时间
4）枚举类型：例如性别、状态
5）二进制：例如图像、音频、视频

2. 数值类型
   类型     大小    范围
   TINYINT  1Byte   0,255
                    -128~127 
   INT      4Bytes  0~2^32-1
                    -2^31 ~ 2^31-1
   BIGINT   8Bytes  0~2^64 - 1
                    -2^63 ~ 2^63-1
   Decimal  可变    存储精确的浮点数

   示例：数值类型示例
   create table num_test(
     -- 显示3位宽度, 无符号, 左边0填充
     card_type int(3) unsigned zerofill,
	 dist_rate decimal(10,2)
   );   
   insert into num_test values(1,0.88);
   insert into num_test values(2,123.456);
   insert into num_test values(3,2);
   insert into num_test values(1000,3.444);

   说明：
     - 当字段使用unsinged修饰时，字段值
	   只能是正数或0
	 - 正数定义时的长度，仅仅是显示宽度，
	   而不是存储的大小，存储大小由数据
	   类型决定
	 - 当使用zerofill时，数值左边会以0填充
	 - 数值超过该类型的最大值，报错
	 - 浮点数小数部分超过指定位数，浮点部分
	   做四舍五入
	 - 整数插入浮点数字段，自动转换为浮点数

3. 字符串类型
1）定长字符串：CHAR
  - 最大存储255个字符
  - 如果实际内容不足指定长度，右边填充空格
  - 如果不指定长度，默认长度为1
  - 超过最大长度，无法存入
  
2）变长字符串：VARCHAR
  - 最大可存储65535个字符
  - 按实际大小分配存储空间
  - 超过指定最大长度，无法存入
  
3）大文本类型：TEXT
  - 存储内容大于65535字节时使用
  
4）CHAR和VARCHAR特点比较
  - CHAR浪费存储空间，VARCHAR节约空间
  - CHAR性能高，VARCHAR性能低
  
  * 推荐使用VARCHAR

4. 枚举
1）枚举两种类型
  - ENUM: 从给定值中选择一个
  - SET：从给定值中选择多个
2）示例
  create table enum_test(
    name varchar(32),
	sex enum('boy', 'girl'),
	course set('music','dance','paint')
  );
  insert into enum_test
  values('Jerry','girl','music,dance');
  
  insert into enum_test
  values('Tom','boy','music');
  -- 插入枚举范围之外的值，报错
  insert into enum_test
  values('Dekie','boy','music,football');

三、更多查询
1. 运算符
1）比较运算符：>,<,>=,<=,=,<>或!=
  示例1：查询订单金额大于200的数据
    select * from orders 
	where amt > 200;
  示例2：查询状态不等于2的订单
    select * from orders 
	where status <> 2;    

2）逻辑运算符
  - and: 多个条件同时满足
  - or：满足多个条件中的一个
  
  练习1：查出订单金额200~400之间的数据
         包含200和400
	select * from orders 
	where amt >= 200 and amt <= 400;
	
  练习2：查询客户编号为C0001、C0002的
         客户所下的订单
	select * from orders
	where cust_id = 'C0001' 
	or cust_id = 'C0002';
	
  练习3：查询客户编号为C0001、C0003的
         客户所下的、状态为1订单
  select * from orders
  where (cust_id='C0001' or cust_id='C0003')
  and status = 1;
  
3）范围比较
  - between...and...: 在...与...之间
                      （包含边界值）
  - in/not in: 在/不在某个集合内
  
  示例1：查出订单金额200~400之间的数据
         包含200和400
    select * from orders 
	where amt between 200 and 400;
 
  示例2：查询客户编号为C0001、C0002的
         客户所下的订单		 
    select * from orders 
	where cust_id in ('C0001','C0002');  
  
4）模糊查询
  - 格式：where 字段名 like "通配字串"
  - 通配字串规则
    下划线(_):匹配一个字符
	百分号(%):匹配任意多个字符
	
  - 示例：
    create table customer(
	  cust_id varchar(32),
	  cust_name varchar(32),
	  tel_no varchar(32)
	) default charset=utf8;
	-- 插入数据
	insert into customer values
	('C0001','Jerry','13811223344'),
	('C0002','Dekie','13844445555'),
	('C0003','Dokas','15877778888');
	-- 查询客户名称以D开头的
	select * from customer 
	where cust_name like 'D%';
	-- 查询名字中包含e的客户信息（任意位置）
	select * from customer 
	where cust_name like '%e%';
  
5）空值判断
  - 判断空：is null
  - 非空判断：is not null
  
  - 示例：查询状态为空的订单
    select * from orders 
	where status is null;
	-- is not null则是status非空的订单
	
2. 查询子句	
1）order by子句
  - 作用：对查询结果进行排序
  - 格式：order by 排序字段 [ASC|DESC]
          ASC：升序（默认排序方式）
		  DESC：降序
  - 示例：查询所有订单信息，按照金额降序排列
    select * from orders
	order by amt desc;
	
2）limit子句
  - 作用：限定查询结果显示的笔数
  - 格式：
    limit n     限定显示前n笔
	limit m,n   从第m笔显示，共显示n笔
  - 示例：
    示例1：查询所有订单，显示金额最大的2笔
	  select * from orders 
	  order by amt desc
	  limit 2;  
	  
	示例2：查询所有订单，从第2笔开始显示，
	       总共显示3笔
	  select * from orders 
	  order by amt desc
	  limit 1,3;  
	  
   - 应用：利用limit m,n查询，实现分页查询
     原理：通过当前第几页、每页显示多少笔
	       这两个数据，来算出limit m,n中的
		   两个数字
		   m = (当前页码 - 1) * 每页笔数
		   n = 每页笔数
	 第一页：
	   select order_id,cust_id 
	   from orders limit 0,3;
	 第二页：limit 3,3
	 第三页：limit 6,3
	 
3）distinct
  - 作用：对某个字段值去重
  - 格式：
    select distinct(字段名) from 表名;
  - 示例：查询订单表一共有几种订单状态
    select distinct(status) from orders;
	
3. 聚合函数
1）什么是聚合：不需要返回表中具体数据，
   而是对数据进行总结，将结果返回
2）有哪些聚合函数
   max: 求某列最大值
     select max(amt) from orders;
   min: 求某列最小值
     select min(amt) from orders;
   avg: 求某列的平均值
     select avg(amt) from orders;
   sum: 求某列的和
     select sum(amt) from orders;
   count: 统计记录笔数
     select count(*) from orders;
	 
4. Group by子句   
1）作用：对查询结果进行分组，通常和聚合
   函数配合使用
2）格式：group by 分组字段
3）示例：
   示例1：统计各种状态订单数量
     select status,count(*) from orders
     group by status;	 
     -- 根据哪个字段分组，select后面一定
     -- 把该字段先查出来
   示例2：统计各种订单状态的最大金额
     select status, max(amt) from orders
     group by status;
	 
5. Having子句
1）作用：对分组聚合结果进行筛选，需要和
   group by子句配合使用
2）格式：group by分组字段having过滤条件
3）示例：统计各种状态订单数量，不显示状态
   为NULL的订单
   select status, count(*) from orders
   -- where amt>=0
   group by status
   having status is not null; --过滤掉null
4）SQL语句执行过程
  第一步：首先执行from语句，找到源数据
  第二步：执行where子句，选出所有满足条件
          的数据
  第三步：group by子句进行分组
  第四步：执行聚合
  第五步：having子句对聚合结果过滤
  第六步：order by子句对结果进行排序
  第七步：limit子句限制显示笔数  
	












	









