字符串的格式化表达式
    '姓名: %s, 年龄:%d'%('小张',10)
    格式化字符串
循环嵌套
    i=0
    while i<5:
        ...
        while j<
break语句
    终止当前循环
    break终止的循环语句 else
day5 笔记
for 语句
    作用:
        用来遍历可迭代对象的数据元素
        (可迭代对象是指能依次获取数据元素的对象)
    可迭代对象：
        字符串str
        列表　list
        元组　tuple
        词组　dict
    for 语句语法
        for 变量列表　in 可迭代对象
            语句块1
        else:
            语句块２
    说明：
        else子语句部分可省略
        当在循环语句内部使用break终止程序时
range函数
    range(stop) 用来生成０～stop区间内的整数，
    直到stop为止(不包含stop)
    range(satr,stop[,step])  用来生成star~stop
    区间内的整数，直到stop为止(不包含stop),每个整数间隔step(且step可以是负数)
    作用：用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)
    说明：此函数调用返回的对象是可迭代对象，可用于for 语句中

for 语句的注意事项
    1, for rang的调用顺序
    2, 变量可能不被创建的问题
      如:
        for x in rang 

for 语句的嵌套
    示例：
        for x in "ABC":
            for y in "123"
                print(x+y)  #打印几次

continue 语句
    问题：
        如何让程序不再往下运行，重新开始一次新的循环
    作用：　
        用于循环语句(while,for语句)，不再执行本次循环内
        continue之后的语句，重新开始新的循环
    语法：
        continue
    说明：
        1, 在while语句中执行continue语句，将会直接跳转到while语句
        的真值表达式，重新判断循环条件
        2, 在for语句中执行continue语句，将会从迭代对象中取下一个元
        素绑定变量后再次进行循环

循环小结：
    四条语句：
        while
        for 
            str 
            range
        break
        continue

列表：list
    问题：
        如何将计算机运算的数据临时存在一个地方，
        同时又方便添加，删除，修改等操作？
    列表：list是可以被改变的序列
             是由一系列特定元素组成的，
             元素与元素之间可能没有任何的关联，
             但他们之间有先后顺序关联
    python3中的序列类型：
        字符串   str 
        列表     list
        元组     tuple
        字节串    bytes
        字节数组   bytearray
创建空列表的字面值
    L = []  # L 绑定空列表
创建非空列表的字面值：
    L = [1,2,3,4]
    L = ['beijing','shanghai','shengzhen']

列表的构造(创建)函数list
    list()    创建一个空的列表，等同于[]
    list(iterable)    用可迭代对象创建一个列表
    示例:
        L = list()
        L = list('hello')# L=['h','e','l','l','e']
        L = list(rang(1,10,2))# L=[1,3,5,7,9]
        
列表运算符：
    + += * *=
    + 拼接列表
    += 将原列表与右侧的可迭代对象的数据追加，得到新的列表
    语法：
        x += 可迭代对象
        x=[1,2,3]
        x+=[4,5,6]
        x+='ABC'
        x+=range(1,10,3)
    注：+=运算符是用原可迭代对像的数据进行追加，原列表的ID不变
    如：
       s='ABC'
       print(id(s))
       s+='123'
       print(id(s))

       L = [A,B,C]
       print(id(L))
       L+='123'
       print(id(L))

    * 生成

列表的比较运算：
    运算符：
          < <= > >= == !=
    说明：
        列表的比较规则与字符串的比较规则相同
        列表要求每个元素依次比较，否则出现类型错误
    示例：
        [1,2,3]==[1,2,3]  # Ture
        [1,2,3]!=[1,3,2]  # Ture
        [1,2,3]> [1,3,2]  # Ture
        [1,2,3]>=[1,2]    # Ture
        [1,'two',]>[1,2]  # TypeErro
列表是可迭代对象
    L= [1,3,5,7]
    for x in L:
        print(x)
列表的 in / not in 运算符
    判断一个值是否存在于列表中，存在返回Ture,否则返回False
    示例：
        x = [1,'two',3,'四‘]
        3 in x    # Ture
        '3' in x    # Ture