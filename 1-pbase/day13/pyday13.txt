day13
自定义模块
    要求
       1,模块文件后缀名必须以.py结尾
       2,模块文件名必须是合法的标识符
       3,避免名称和内建文件名冲突
    导入方式：
       import 

import 语句搜索模块的路径顺序
 1,搜索内建模块
 2,搜索程序运行时的路径(当前工作目录)
 3,搜索sys.path提供的路径
   sys.path是一个列表,里面放的是模块的索引路径

模块化编程的优点：
    1,有利于多人合作
    2,使代码更易维护
    3,提高代码的复用率
    4,模块化编程有助于解决变量名冲突(重名)问题，模块内的全局变量的作用域为模块内全局

模块的加载过程
    在模块被导入时，模块的所有语句会执行
    如果一个模块已经被导入，则再次导入时不会重新执行语句块内的语句            

模块的重新加载
    import mymod
    import imp
    imp.reload(mymod) #重新加载mymod模块

模块被导入和执行的过程
    1,先搜索相关路径找模式(.py)
    2,判断是否有此模块对应的.pyc文件，如果.pyc比.py文件新
    则直接加载.py文件
    3,否则用模块.py文件生成.pyc文件并加载执行

模块的编译 compile
            编译             解释执行
 mymod.py ------> mymod.pyc ------> python3

模块的文档字符串
    模块内第一个没有赋值给任何变量的字符串是模块字符串
    模块的__doc__属性
        用于绑定模块的文档字符串
    模块的__file__属性
        __file__属性用于绑定模块文件的路径名
    模块的__name__属性
       __name__属性用来记录模块自身的名字

       作用：
           1,记录模块名
           2,用来判断是否为主模块
       说明：
           1,当此模块作为主模块(也就是第一个运行的模块)运行时，__name__绑定'__main__'
           2,当此模块不是主模块时，__name__绑定'模块名'
模块的__all__列表
     模块中的__all__列表是一个用来存放可导入属性的字符串列表
    作用：
        当用from xxx import

模块的隐藏属性
    模块中以_开头的属性，在from xxx import *导入时将不被导入
    通常称这些属性为隐藏属性
    作用：限制from import *语句，不导入隐藏属性
    示例见：mymod3.py

随机模块 random
 作用：用于模拟随机输出
 文档参见：python_base_docs_html/随机模块random.py


包(模块包) package
  包的定义
        包是将模块以文件夹的组织形式进行分组管理的方法
  作用：
        将一系列模块进行分类管理，有利于防止命名冲突
        可以在需要的时候加载一个或部分模块，而不是全部模块
  包示例:mypack/
            __init__.py
            menu.py
            games/
               __init.py
               contra.py
               super

包的导入
  同模块的导入规则一样
   import 包名 [as 包别名]
   import 包名.模块名 [as 包别名]
   import 包名.子包名.模块名 [as 模块新名]
   ...
   from 包名 import 模块名 [as 模块新名]
   from 包名.子包名 import 模块名 [as 模块新名]
   from 包名.子包名.模块名 import 模块名 [as 模块新名]
   ...
   from 包名 import *
   from 包名.模块名 import *

import 语句 搜索包的路径顺序
    1，搜索程序运行时的路径(当前工作路径)
    2, sys.path提供路径

包的__init__.py文件
__init__.py 是常规包里必须存在的文件
__init__.py 会在包加载时自动调用
    作用：
        编写此包的内容
        在内部填写包的文档字符串

__init__.py 内的__all__列表
作用：
    用来记录此包中有那些子包或模块需要导入
    当用 from 包 import * 语句导入模块时，只要查找__all__中所有模块或子包
    说明：
        
包的相对导入
       是指包内模块的相互导入
    语法：
       from 相对路径包或模块 import 属性或模块名
       from 相对路径包或模块 import *
    相对路径：
        在from import 语句和 from import * 语句中可以使用相对导入
        在 from 和 import 间可以用相对路径
        . 代表当前目录
        .. 代表上一级目录
        ... 代表上两级目录
        注：相对导入时不能超出包的外部
    示例 mypack.games/contra.py 里的gameover函数