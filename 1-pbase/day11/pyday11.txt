day11
函数式编程 function programming
    函数式编程是指用一系列函数解决问题
好处：
    用每一个函数完全缩小的功能，一系列函数的任意组合可以完成大问题
    函数仅接受输入并产生输出，不包含任何能影响输出的内部状态
函数的可重入性
    当一个函数没有访问除局部变量以外的变量，则此函数为可重入函数
    可重入函数输入一定，结果必然一定
高阶函数 High Order Function
    满足
    1,函数接受一个或多个函数作为参数传入
    2,函数返回一个函数
python 内置的高阶函数
    map filter sorted
map 函数
    参数格式：
        map(function,iterable,...)
    参数： 
        func 对可迭代对象的数据进行处理的函数，
        函数的参数必须与可迭代对象的个数相同
        iterable，一个或多个可迭代对象，用来给map提供数据
    返回值：
        可迭代对象
示例：
    map.py
    map2.py
filter 函数
参数格式：
     filter(func，iterable)
参数说明：
     func 含有一个形参的数据处理函数，此函数传入的值为iterable
     中提供的数据，func 将对iterable中的每个元素进行求布尔值，
     返回TRUE则保留此值返回False则将此数据丢弃
     iterable为提供数据的可迭代对象
作用：筛选数据
示例见：filter.py

sorted 函数
    作用：
        将原可迭代对象的数据进行排序，生成排序后的列表
    格式：
        sorted(iterable,key=None,reverse=False)
    参数说明
        iterable 用来提供数据的可迭带对象
        key      函数是用来提供一个值，这个值将作为排序的依据
        reverse  标志用来设置是否为降序排列(默认为升序排列)
    示例： 
    L=[5,4,6,3,2,7,8]
    sorted(L)#[2,3,4,5,6,7,8]
    sorted(L,reverse=True)#[8,7,6,5,4,3,2]
    sorted(L,key=abs)


递归函数 recursion Function
  函数直接或间接调用自身
  示例： 
     # 函数直接调用自身
        def f():
            f() # 调用自己
        f()
     # 函数间接调用自身
        def fa():
            fb()
        def fb():
            fa()
        fa()

递归说明
     递归一定要控制递归的层数，当符合某一条件时要终止递归调用
     几乎所有的递归都能用while循环来代替
递归的优缺点
     优点：可以把问题简单化，让思路可以更为清晰，代码更为简洁
     缺点：递归因系统环境影响大，当递归深度太大时，可能会得到不可预期的结果
递归的两个结果：
     递推阶段：从原问题出发，按递归公式递归，从未知到已知，最终达到递归的终止条件
     回归阶段：按递归终止条件求出结果，逆向逐步代入递归公式，回归原问题求解
递归函数的实现方法
     先假设函数已经实现了原功能，在编写程序
    示例见：recursion.py

闭包 closure
    闭包是指引用了此函数外部嵌套函数作用域的变量的函数
    闭包必须满足三个条件：
    1， 必须有一个内嵌函数
    2， 内嵌函数必须引用外部函数中的变量
    3， 外部函数返回值必须是内嵌函数
全局变量和局部变量的区别
 全局变量：一直存在，谁都可以访问和修改
 局部变量：只是在函数调用时存在，只能在函数内部进行访问和修改
 示例见：closure.py

闭包的注意事项：
    由于闭包会使得函数中的变量都被集存在内存中，内存消耗比较大，所以不能滥用闭包
闭包的应用示例：
    closure_make_power.py

小结：
 函数式编程：
     高阶函数：
     map,filter,sorted
 递归函数
 闭包
 
