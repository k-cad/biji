day07
元组　tuple
    元组是不可改变的序列，
    同list一样,元组是可以存放任意类型的数据的容器
元祖的表示方式：
    用小括号()括起来，单个元素括起来后加逗号(,)区分单个对象还是元组
创建空元组的字面值
   t=()
创建非空元组的字面值
   t=200,
   t=(200,)
   t=(1,2,3)
   t=1,2,3
注：type(x)函数返回x的类型
元组创建的错误示例
   t=(20)#t绑定20这个整数
   x,y,z=100,200,300#序列赋值,不是元组
   x,y,z=(100,200,300)
   x,y,z=[100,200,300]
   x,y,z='ABC'#序列赋值,不是元组
元组的构造函数(创建)函数　tuple
   tuple() 生成一个空的元组
   tuple(iterable) 用可迭代对象生成一个元组
示例：
    t=()
    t=(range(1,10,3))
元组的运算
    + += * *=
    + 用于拼接 
    += 拼接后重新赋值
    * 生成重复的元组
    *= 生成重复的元组后重新赋值
元祖的比较运算
    运算符
        < <= > >= == !=
    说明：
        元组的比较规则与列表比较规则完全相同
    in / not in 运算符
索引 index
    用法等同于列表的切片，
    元祖不能索引赋值
切片 slice
    用法等同于列表的切片，元祖的切片返回一个新的元组
    元组不能切片赋值
元祖的方法

序列相关的函数总结
    ＃　可用于序列：str list tuple
    len(x),max(x),min(x),sum(x),any(x),all(x)
    构造函数
        str(x)
        list(x)
        tuple(x)

    reversed(x),sorted(x,reverse=False)


字典　dict
  1,字典是一种可变的容器，可以存储任意类型的数据
  2,字典中的每个数据是用"键"(key)进行索引的，而
  不是像序列可以用下标进行索引
  3,字典中的数据没有先后顺序，字典的储存是无序的
  4,字典中的数据以键(key)-值(value)对的形式进行存储
  5,字典的键不能重复，且只能用不可变类型作为字典的键
字典的字面值表示方法
    字典的表示方法是用{}括起来，以冒号(:)分隔键值对，
    各键值对之间用逗号分隔开
创建空字典的字面值：
    d={}  # 空字典
创建非空字典
    d = {'姓名':'小张','年龄':21}
    d = {1:'一'，2:'二'}
字典的构造函数　函数dict
    dict()          #生成一个空字典
    dict(iterable)  #用可迭代对象创建一个字典
    dict(**kwargs)  #用关键字传参生成一个字典
示例：
    d = dict()
    L = [('姓名','小张'),['年龄',20],'AB']
    d = dict(L)
    d = dict(name='小张',age=20)

字典的键(key)必须为不可变的数据类型，
可以用数字，字符串，元组等充当字典的键
python3中不可变的数据类型
  bool,int,float,complex,str,tuple
  forzenset(固定集合)，bytes(字节串)
  包括：None
python3中可变的数据类型
  list,dict,set(),bytearray()
示例：
    d = {'a':100}
    d = {'a':(1,2,3)}
    d = {(1,2,3):'a'}
    d = {'a':[1,2,3]}
    d = {[1,2,3]'a'}#报错
    d = {'a':{'b':100,'c':200}}
    d = {{1:'一'}:'壹'}#报错
字典的基本操作
  字典的键索引
    用[]运算符可以获取字典内'键'所对应的'值'
  取值语法
    变量 = 字典[键]
  示例：
      d = {'name':'tarena','age':15}
      d['name']='tarena'
      d['age']=15

  添加和修改字典的键值对
    语法：
      字典[键]=表达式
    说明：
      键不存在创建键并绑定键对应的值
      键存在，修改键绑定的值
    示例：
        d={}
        d['name']='tarena'#添加
        d['age']=15
        d['age']=16# 修改
        d['age']+=1

  删除字典的元组　del 语句
        语法
           del 字典[键]
        作用
           删除字典的键，同时解除对值的绑定
        示例：
            d = dict(name="小张", age=20)
            del d['age']
            print(d)  # {'name': '小张'}
       

  in / not in 运算符
    用于字典中，in 运算付用来判断一个键是否存在于字典中，
    如果存在则返回Ture,否则返回False
  not in 与　in 结果相反
    示例：
     d = {'name':'tarena','age':15}
     'name' in d # Ture
     'tarena' in d # False
     15 not in d # Ture


字典是可迭代对象
    字典只能对键进行迭代访问
    示例：
        d = {'name':'tarena','brithday':(2012.1.1)}
        for k in d:
            print(k)
字典的比较运算符
    运算符
         ==　!=
    说明：
        只有键和值完全相同是，才相等，否则不相等
    示例：
        {1:'一',2:'二'}=={1:'一',2:'二'}#Ture
        {1:'一',2:'二'}=={1:'1',2:'2'} #False
可以用于字典的内置函数
  len(x)  返回字典的键值对的个数
  max(x)  返回字典的键的最大值
  min(x)　返回字典的键的最小值
  sum(x)  返回字典的所有键的和
  any(x)  真值测试，如果字典中其中一个值为真值则返回Ture
  all(x)  真值测试，如果字典中全部值为真值则返回Ture
  示例：
      d ={0:'一',3:'叁',5:'五',8:'八'}

字典的方法
    参见文档　　python_base_docs_html
    示例：
        for i in d.items():
            print(i)#
        for k,v in d.items():
            print(k,v)
字典推导式
    是用可迭代对象依次生成字典内元素的表达式
    语法；
    　　　{键表达式：值表达式　ｆｏｒ　变量　ｉｎ　可迭代对象[if 真值表达式]...}
    示例：
        d = {x:x**2 for x in range(10)}

dict　VS list
1, 都是可变对象
2, v=d.index[k] 索引方式不同，列表用整数索引，字典用键索引
3, 字典的插入，删除，修改的速度可能会快于列表(重要)
4， 列表的储存是有序的，字典的储存是无序的

