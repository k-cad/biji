day05回顾
  循环语句
    for 语句
      for 变量列表 in 可迭代对象:
          语句块1
      else:
          语句块2
    可迭代对象:
      字符串str, range()返回的对象, 列表list
    range(停止)
    range(开始, 停止)
    range(开始, 停止, 步长)
    for语句嵌套
    
    continue语句
    　　
  列表 list
  　创建列表:
       字面值
         L = [1, 2, 3, 4]
         []
       构造函数
         list()
         list(range(10))
         list("ABC")
         L2 = list(L) # 复制列表  L2 = L
  列表的运算:
    +  +=  *  *= 
    <  <=  >  >=  ==  != 
    in / not in 运算符
      判断一个元素是否存在于列表
    

day06 笔记
列表的索引操作
　语法:
    列表[整数表达式]
  用法:
    等同于字符串的索引
    索引分为正向索引和反向索引，规则与字符串索引规则完全相同
  示例:
    L = [1, 2, 3, 4]
    print(L[1])  # 2
    print(L[-1])  # 4

列表是可变的序列，列表支持索引赋值，列表可以通过索引赋值改变
列表中的元素
  语法:
    列表[整数表达式] = 表达式
  示例:
    L = [1, 2, 3, 4]
    L[2] = 3.14  # 改变了第三个元素的值




列表的切片操作
  取值:
    列表[起始值:终止值]
    列表[起始值:终止值:步长]
    列表的切片取值返回一个列表，规则等同于字符串切片规则
  示例:
    L = list(range(10))
    L2 = L[::2]  # L2 = [0, 2, 4, 6, 8]



  列表的切片赋值
    作用:
      可以改变源列表的排列，可以插入，修改和删除数据
    语法:
      列表[切片] = 可迭代对象
    说明:
      切片赋值的赋值运算符(=)的右侧必须是一个可迭代对象
    示例:
      L = [2, 3, 4]
      L[0:1] = [1.1, 2.2]  # L = [1.1, 2.2, 3, 4]
      L[2:] = [3.3, 4.4, 5.5]  # L = [1.1, 2.2, 3.3, 4.4, 5.5]
      L[1:4] = []  # 切出2.2, 3.3, 4.4, 没加入新数据 L = [1.1, 5.5]
      L[1:] = range(5, 9)  # L = [1.1, 5, 6, 7, 8]
      L = [2, 5]
      L[1:1] = [3, 4]  # L = [2, 3, 4, 5]
      L[0:0] = range(2) # L = [0, 1, 2, 3, 4, 5]
      L[6:] = [6, 7] # L = [0, 1, 2, 3, 4, 5, 6, 7]

  切片注意事项:
    对于步长不等于1的切片赋值，赋值运算符的右侧的可迭代对象提
    供的元素的个数，一定要等于切片切出的段数
      L = [1, 2, 3, 4, 5, 6]
      L[::2] = "ABC"  # 对的
      L[::2] = "ABCDE" # 错的

del 语句用于删除列表的元素
  语法:
    del 列表[索引]  # 删除索引
    del 列表[切片]  # 删除切片
　示例:
    L = [1, 2, 3, 4, 5, 6, 7]
    del L[-1]  # L = [1, 2, 3, 4, 5, 6]
    del L[::2]  # L = [2, 4, 6]

练习:
  已知有列表:
    L = [3, 5]
  1) 用索引和切片操作，将原列表改变为:
    L = [1, 2, 3, 4, 5, 6]
  2) 将列表反转，删除最后一个元素后，打印此列表:
    ...
    print(L)  # [6, 5, 4, 3, 2]




Python3 中常用于序列的函数:
  len(x)   返回序列的长度
  max(x)   返回序列的最大值元素
  min(x)   返回序列的最小值元素
  sum(x)   返回序列中所有元素的和(元素必须是数值类型)
  any(x)   真值测试,如果列表中其中一个值为真值则返回True
  all(x)   真值测试,如果列表中所有值为真值才返回True,否则
           返回False

  示例:
    L = [8, 3, 6, 2, 7]
    print(len(L))  # 5
    print(max(L))  # 8
    print(min(L))  # 2
    print(sum(L))  # 26
    print(any(x))  # True
    print(all(x))  # True

序列函数2
  reversed(seq)  返回原序列反向顺序的可迭代对象
  sorted(iterable, reverse=False)   返回已排序的列表

  示例:
    L = [1, 2, 3, 4]
    for x in L:
        print(x)  # 1 2 3 4
    for x in reversed(L):
        print(x)  # 4 3 2 1
    L2 = [5, 8, 3, 7, 1]
    L3 = sorted(L2)  # L3 = [1, 3, 5, 7, 8]
    L4 = sorted(L2, reverse=True)  # 降序排序 L4=[8,7,5,3,1]

练习:
  1.  写程序,让用户循环输入一些正整数.当输入-1时结束输入,将
    这些整数存于列表L中.
    1) 打印出您共输入了几个有效的数(不算结束的-1)
    2) 打印您输入的最大数是多少?
    3) 打印您输入的最小数是多少?
    4) 打印您输入的这些数的平均值是多少?

  2. 写一个程序,让用户输入两个或以上的正整数,当输入小于零的数
     时结束输入(不允许输入重复的数)
     1) 打印这些数的和
     2) 打印这些数的最大数
     3) 打印这些数的最二大的数
     4) 删除最小的一个数,并打印原来的列表
    

python3 中常用的列表方法
  文档参见:
    python_base_docs_html/list.py

练习:
  输入多行文字,存入列表中
  每次输入后回车算作一行,任意输入多行文字.
  当直接输入回车(即空行时算作输入结束)
    要求:
      1) 按原输入的内容在屏幕上输出内容
      2) 打印出您共输入了多少行文字
      3) 打印出您共输入了多少个字符
    如:
      请输入: ABC 
      请输入: abc
      请输入: 123
      请输入: <回车>
    您输入的内容是:
      ABC
      abc
      123
    您输入了3行文字
    您输入了9个字符

       
深拷贝 和 浅拷贝
浅拷贝 shallow copy
  浅拷贝是指在复制过程中,只复制一层变量,不会复制深层变量绑定的
  对象的复制过程
  如:
    L1 = [1, 2, [3.1, 3.2]]
    L2 = L1.copy()
    L2[2][0] = 3.14
    print(L1)  # [1, 2, [3.14, 3.2]]
    print(L2)  # [1, 2, [3.14, 3.2]]

深拷贝 deep copy
  深拷贝会在复制过程中,逐层复制深层对象,实现两个对象的完全独立
  如:
    import copy  # 导入考拷贝模块
    L1 = [1, 2, [3.1, 3.2]]
    L2 = copy.deepcopy(L1)
    L2[2][0] = 3.14
    print(L1)  # [1, 2, [3.1, 3.2]]
    print(L2)  # [1, 2, [3.14, 3.2]]

小结:
  L1 = [1, 2, [3.1, 3.2]]
  L2 = L1  # 不拷贝 
  L3 = L1.copy()  # 浅拷贝
  import copy
  L4 = copy.deepcopy(L1)  # 深拷贝




列表与字符串比较:
  列表和字符串都是序列,元素之间有先后关系
  字符串中每个元素只能存储字符,而列表可以存储任意类型的元素
  字符串是不可变的序列,而列表是可变的序列
  列表和字符串都是可迭代对象

字符串的文本解析方法
  方法名     说明
 S.split(sep=None)  将字符串,使用sep作用分隔符分割S字符串
           返回分割后的字符串列表,当不给定参数时,用空白字符
           作为分隔符
 S.splitlines()  将字符串接换行符'\n' 分为分隔符进行分割
           返回分割后的列表
 S.join(iterable)  用可迭代对象中的字符串,返回一个是中间
           用S进行分隔的字符串
  示例:
    s = 'Beijing is capital'
    L = s.split()  # L = ['Beijing', 'is', 'capital']
    s2 = '-'.join(L)  # s2 = 'Beijing-is-capital'

练习:
  有字符串'hello' 生成字符串'h e l l o'  和 'h-e-l-l-o'
   答案:
     s = 'hello'
     s2 = ' '.join(s)
     s3 = '-'.join(s)




创建列表的方法有几种:
  字面值:
    [1, 2, 3]
  构造函数:
    list(range(1, 4))
  列表推导式方式

列表推导式 list comprehension
  列表推导式是用可迭代对象创建列表的表达式
  作用:
    用简易方法生成列表
  语法:
    [表达式 for 变量 in 可迭代对象]
    或
    [表达式 for 变量 in 可迭代对象 if 真值表达式]
  示例:
    生成一个数值为1~9的整数的平方的列表,如:
      L = [1, 4, 9, 16, 25, 36, 49, 64, 81]
    用循环语句:
      L = []
      for x in range(1, 10):
          L.append(x ** 2)
      L = [x ** 2 for x in range(1, 10)]

练习 :
  用列表推导式生成 1~100 内所有奇数组成的列表
  结果是:[1, 3, 5, 7, ....., 99]


  示例:
    生成一个数值为1~9的奇数的平方的列表,如:
      L = [1, 9, 25, 49, 81]
    L = [x**2 for x in range(1, 10) if x % 2 == 1]

列表推导式的嵌套:
  语法:
    [表达式 for 变量1 in 可迭代对象1 if 真值表达式1 \
              for 变量2 in 可迭代对象2 if 真值表达式2 \
                ...]
  示例:
    将列表[10, 20, 30] 中的元素与列表[1, 2, 3] 元素分别相
    加,将得到的元素放于一个列表中...
    L = [x + y for x in [10,20,30] for y in [1,2,3]]
    print(L)  # [11, 12, 13, 21, 22, 23, 31, 32, 33]
  
  
1. 练习:
  用字符串"ABC" 和 "123 生成如下列表:
['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']

2. 生成一个列表,此列表为x的平方加1不能被5整数的数的列表
   条件: (x ** 2 + 1) % 5 != 0
   x的取值范围是: 0 <= x < 100
   L = [x for x in range(100) if (x ** 2 + 1) % 5 != 0]




练习:
  1. 已知有一个字符串:
      s= '100,200,300,500,800'
    将其转化为列表,列表内都为整数,即:
      L = [100,200,300,500,800]

  2. 有一些数存于列表中,如:
    L = [1, 3, 2, 1, 6, 4, 2, ....., 98, 82]
    1) 将列表中出现数字存入到另一个列表L2中
       要求:
         重复出现多次的数只在L2列表中保留一份(去重)
    2) 将列表中出现两次的数字存于L3列表中,在L3列表中只保留一份
  3. 生成前40个斐波那契数(Fibonacci)
      1  1  2  3  5  8  13  21
    要求:  将这些数保存在列表中,最后打印这些数
      注: 斐波那契数的前2个数为1 和 1, 从第二个数起为前两个
      数相加之和
  




