day06
    L2=list(L)#复制列表
    L3=L #绑定列表
列表的索引
    语法：
        列表[整数表达式]
    用法：
        等同于字符串的索引
        索引分为正向索引和反向索引，规则与字符串索引完全相同
    示例：
        L = [1,2,3,4]
        print(L[i])
        print(L[-i])
    列表是可变的序列，列表支持索引赋值
    通过索引赋值可以改变列表中的元素
        语法：
            列表[整数表达式]=表达式
        示例：
            L=[1,2,3,4]
            L[2]=3.14
            L=[1,3.24,3,4]
列表的切片操作
    取值:
        列表[起始]

列表的切片赋值
    作用：
        可以改变列表的排列，可以插入，修改删除数据
    语法：
        列表[切片]=可迭代对象
    说明：
        切片赋值的赋值运算符(=)的右侧必须是一个可迭代对象
    示例：
        L=[2,3,4]
        L[0:1]＝[1.1,2.2]    # L=[1.1,2.2,3,4]
        L[2:]=[3.3,4.4,5.5]  #L=[1.1,2.2,3.3,4.4,5.5]
        删除：L[1:4]=[]       # L=[1.1]
        L[1:]=range(5,9)     #L=[1.1,2.2,5,6,7,8,9]
        插入：L=[2,5]
        L[1:1]=[3,4]         #L=[2,3,4,5]
        L[0:0]=range(2)      # L=[0,1,2,3,4,5]
        L[6:]=[6,7]          #L=[0,1,2,3,4,5,6,7]
    切片的注意事项：
        对于步长不等于1的对象赋值，赋值运算符的右侧
        可迭代对象提供的元素个数，要等于切片切出的个数
        L=[1,2,3,4,5]
        L[::2]='ABC' # 对的
        L[::2]='ABCD'#　错的
del 语句用于删除列表的元素
    语法：
        del 列表[索引]
        del 列表[切片]
    示例：
        L=[1,2,3,4,5,6,7]
        del L[6]     # L=[1,2,3,4,5,6]
        del L[::2]   # L=[2,4,6]
练习：
    已知有列表：
        L=[3,5]
        1) 用切片和索引操作，将原列表改变为：
          L=[1,2,3,4,5,6]
        2) 将列表反转，删除最后一个元素后，打印列表
          print(L) # [6,5,4,3,2]

python3中常用于序列的函数：
    len(x)    返回序列的长度
    max(x)    返回序列的最大元素
    min(x)    返回序列的最小元素
    sum(x)    返回序列的所有元素的和(元素必须是数值类型)
    any(x)    真值测试，如果列表中其中一个值为真值则返回True
    all(x)    真值测试，如果列表中所有值为真值才返回True，否则返回False

序列函数2:
    reversed(seq)  返回原序列反向顺序的可迭代对象
    sorted(iterable,reverse=False)  返回已排序的列表
    示例：
        L = [1,2,3,4]
        for x in L:
            print(x)# 1 2 3 4
        for x in reversed(L):
            print(x)# 4 3 2 1 

练习：
    1, 写程序，让用户循环输入一些正整数，当输入-1时结束，将这些整数
    存于列表L中。
      1) 打印出您共输入了几个有效的数(不算结束的-1)
      2) 打印您输入的最大的数
      3) 打印您输入的最小的数
      4) 打印您输入这些数的平均数
    2, 写程序，让用户输入两个或两个以上的正整数，当输入小于零的数时结束
    输入(不允许输入重复的数)
      1) 打印这些数的和
      2) 打印这些数的最大值
      3) 打印这些数的第二大值
      4) 删除最小的一个数
深拷贝　和　浅拷贝
    浅拷贝　shallow copy
    浅拷贝是指在复制的过程中，只复制一层变量，不会复制深层变量绑定的对象
    的复制过程
    如：
      L1 = [1,2,[3.1,3.2]]
      L2 = L1.copy()
      L2[2][0] = 3.14
      print[L1] # [1,2,[3.14,3.2]]
      print[L2] # [1,2,[3.14,3.2]]
    深拷贝　deep copy
    深拷贝会在复制过程中，逐层复制深层对象，实现两个对象的完全独立
    如：
      import copy # 导入拷贝模块
      L1 = [1,2,[3.1,3.2]]
      L2 = copy.deepcopy(L1)
      L2[2][0] = 3.14
      print[L1] # [1,2,[3.1,3.2]]
      print[L2] # [1,2,[3.14,3.2]]
    小结：
        L1 = [1,2,3,[3.1,3.2]]
        L2 = L1
        L3 = L1.copy()
        L4 = L1    

列表与字符串的比较
    列表和字符串都是序列，元素之间有先后顺序
    字符串中的每个元素只能存储字符；而列表可以存储任意类型的元素
    字符串是不可改变的序列，列表是可改变的
    列表和字符串都是可迭代对象

字符串的文本解析方法
    方法名　　　说明
    S.split(sep=None)    将字符串S使用sep作用分隔符分割S字符串
                         返回分割后的字符串列表，当不给定参数时，
                         用空白字符串作为分隔符
    S.splitlines()       将字符串换行符'\n'作为分隔符进行分割
                         返回分割后的列表
    S.join(iterable)     用可迭代对象中的字符串，返回一个中间是
                         用S进行分割的字符串
创建列表的方法
    字面值：
        [1,2,3]
    构造函数：
        list(range(a,b))
    列表推倒式
        列表推倒式是用可迭代对象创建列表的表达式
            作用：
                用简易方法生成列表
            语法：
                [表达式 for 变量 in 可迭代对象]
                [表达式 for 变量 in 可迭代对象 if 真值表达式]
            示例：
                生成一个数值为1~9的整数的平方和的列表，如：
                L = [1,4,9,25,36,49,64,81]
    列表推导式的嵌套
        语法：
            [表达式　for 变量1　in 可迭代对象1 if 真值表达式2 \
                for 变量2 in 可迭代对象2 if 真值表达式2 \
                    ...]
        示例：
            将列表[10,20,30] 中的元素与列表[1,2,3]分别相加，
            将得到的元素放在一个列表中
            [x+y for x in [10,20,30] for y in [1,2,3]]
