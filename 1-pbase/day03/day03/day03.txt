day02 回顾
  运算符
    复合赋值算术运算符:
      += -= *= /= //= %= **=
        如: x += y   等同于 x = x + y
    比较运算符:
      <  <=  >  >=   ==  != 
    布尔运算:
      not   and    or
    正负号运算符
      +(正号)  -(负号)   一元运算符

  表达式
    条件表达式:
       _表达式1_ if _真值表达式_ else _表达式2_

  语句
    if 语句
      if 真值表达式1:
          语句块(注: 语句块内的语句要有相同的缩进)
      elif 真值表达式2:
          ...
      ....
      else:
         语句块3

    pass 语句
  内建函数
    数值转换函数
      float(x)
      int(x=0) 或 int(x, base=10)
      complex(real=0.0, image=0.0)
      bool(x)

        bool(x) 布尔值为假值:
        0.0   0   0j   False None
        ''
        []
        ()
    数值型函数:
      abs(x)
      round(number, 小数点向右的位数)
      pow(x, y, z=None)
    基本输入输出函数:
      输入函数:
        input('提示字符串') 
        返回用户输入的字符串
      输出函数:
        print(value, ...,  sep=' ', end='\n', flush=False)



day03 笔记
字符串 str
  作用:
    用来记录文本(文字)信息
  
字符串的表示方式:
  在非注释中,凡是用引号括起来的部分都是字符串
    '    单引号
    "    双引号
    '''  三单引号
    """  三双引号

空字符串的字面值表示方式:
  ''
  ""
  ''''''
  """"""
  注: 空字符串的布尔值bool(x) 为False

非空字符串的字面值表示方式
  'hello'
  "hello"
  '''hello'''
  """hello"""


单引号和双引号的区别
  单引号内的双引号不算结束符
  双引号内的单引号不算结束符

  示例:
    print("I'm a teacher")
    print('I am studing "Python"')

三引号字符串
  作用:
    三引号字符串中的换行会自动转换为换行符'\n'
    三引号字符串内可以包含单引号和双引号
  示例:
    print('welcome to beijing!\nI like Python!\nI am studing')
    print('''welcome to beijing!
    I like Python!
    I am studing''')


隐式字符串的字面值拼接
  示例:
    s = "I'm a teacher"  ' I am studing "Python"'
    print(s)  # I'm a teacher I am studing "Python"

用转义序列代表特殊字符
  字符串字面值中用字符反斜杠(\) 后跟一个或一些字符代表特殊的
  一个字符

  转义格式     说明
    \'       单引号(')
    \"       双引号
    \\       一个反斜杠
    \n       换行
    \r       返回光标至行首
    \t       水平制表符
    \v       垂直制表符
    \b       倒退(backspace)
    \f       换页
    \a       响铃
    \0       字符串,字符值为零
    \0oo     oo为两位八进制表示的字符
    \xXX     XX为两位十六进制表示的字符
    \uXXXX   UNICODE16的十六进制表示的字符
    \UXXXXXXXX UNICODE32的十六进制表示的字符

ASCII 编码表:
  $ man ascii <回车>

常用的ASCII编码值:
  字符   十进制  十六进制
  '0'     48     0x30
  'A'     65     0x41
  'a'     97     0x61

求序列长度的函数len(x)
   len(x)  返回字符串中字符的个数

练习:
  看下列字符串中有几个字符
    1.  '1234abcd'    # 8个
    2.  '5\'4"'       # 4个
    3.  '\"A\x34\056' # 4 个
    4.  '\a\bc\td\n'  # 6个


raw 字符串 (原始字符串)
  格式:
    r'字符串内容'
    r"字符串内容"
    r'''字符串内容'''
    r"""字符串内容"""
  作用:
    让转义符号 \ 无效
  示例:
    a = 'C:\newfile\test.py'
    print(a)
    b = r'C:\newfile\test.py'
    print(b)


字符串的运算
  + 加号用于拼接字符串
    x = "ABCD" + "1234"
    print(x)  # ABCD1234
    y = x + r'abcd'
    print(y)  # ABCD1234abcd

  += 运算符用于原字符串与右侧字符串拼接,变量绑定新生成的字符串
    x = "ABCD"
    x += '1234'
    print(x)  # ABCD1234
 
  * 运算符用于生成重复的字符串
    x = "ABCD" * 3
    print(x)  # ABCDABCDABCD
    注: 字符串只能和整数相乘

  *= 用于生成重复的字符串,变量绑定新生成的字符串
    x = "123"
    x *= 4
    print(x)  # 123123123123


练习:
  写一个程序,打印一个高度为4行的矩形方框
     要求输入一个整数,此整数代码矩形的宽度,打印
     相应宽度的矩形
    如:
      请输入矩形宽度: 10
    打印如下:
      ##########
      #        #
      #        #
      ##########


字符串的比较
  运算符:
    <  <=   >   >=  == != 
  规则:
    依次按编码值进行两两字符比较,一旦不同,则比较结束,返回比较
    结果.当编码值与长度完全相同时,两个字符串相等
  示例:
    'A' < 'B'       # True
    'a' < 'B'       # False
    'ABC' > 'ABB'   # True
    'ADC' >= 'ACD'  # True
    'AB'  < 'ABC'   # True
    'AD'  > 'ABC'   # True
    'abc' != 'ABC'  # True



in  和  not in 运算符
  作用:
    in 用于序列,字典,集合中,用于判断某个值是否存在于容器中,如
      果存在则返回True,否则返回False
    not in 与 in 运算符返回结果相反
  格式:
    对象 in 序列
    注: 字符串是序列的一种
  示例:
    x = 'welcome to beijing'
    'to' in x    # True
    'tarena' in x  # False
    'hello' not in x  # True
    'e t'  not in x   # False


练习:
  写程序,输入一个长长的字符串,判断你的姓名是否存在于用户输入
    的字符串中,如果存在则打印:"你的名字出现了"
    否则不预理睬(忽略)


字符串的索引和切片操作
  索引 index
    python 字符串是不可以改变的字符序列
  语法:
    字符串[整数表达式]
  说明:
    python序列都可以用索引(index) 来访问序列中的对象
    python序列正向索引是从0开始的,第二个索引为1,最后一个为:
       len(s)-1
    python序列的反向索引是从-1开始的,-2代表倒数第二个,以此类
       推,... 第一个是-len(s)
  示例:
    s = "ABCDE"
    s[1]   # B
    s[-1]  # E
    s[-4]  # B
    s[-8]  # 越界错误 IndexError
  
练习:
  输入一个字符串,打印如下内容:
    1. 打印这个字符串的第一个字符
    2. 打印这个字符串的最后一个字符
    3. 如果这个字符串的长度是奇数,打印中间这个字符:
    注: 求字符串长度的函数是 len(x)
  

  切片 slice
    作用:
      从字符串序列中取出相应的元素,重新组成一个新的字符串序列

    语法:
      s[(开始索引b):(结束索引e)(:(步长))]
      注: 小括号() 括起的部分代表可省略
    说明:
      开始索引是切片开始切下的位置,0代表第一个元素,1代表第二
        个元素,-1 代表最后一个元素...
      结束索引是切片的终止索引(但不包含终止点)
      步长是切片每次获取完当前元素后移动的方向和偏移量
        没有步长,相当于步长为1(默认为1)
        当步长为正整数时,取正向切片:
           开始索引默认为0,结束索引为最后一个元素的下一个元素
        当步长为负整数时,取反向切片:
           反向切片时,默认的起始位置为最后一个元素,终止位置
           是第一个元素的前一个位置
    示例:
      s = 'ABCDE'
      x = s[1:4]  # x---> 'BCD'
      x = s[1:]   # x---> 'BCDE'
      x = s[:4]   # 'ABCD'
      x = s[:]    # 'ABCDE'
      x = s[1:1]  # '' 空字符串
      x = s[4:2]  # ''
      x = s[1:4:1]  # 'BCD'
      x = s[1:4:2]  # 'BD'
      x = s[0::2]   # 'ACE'
      x = s[3:0:-1]  # 'DCB'
      x = s[::-1]    # 'EDCBA'
      x = s[4:-100:-1]  # 'EDCBA'
      x = s[4::-2]   # 'ECA'
      x = s[4:0:-2]   # 'EC'

练习:
  1. 写一个程序,输入一个字符串,把字符串的第一个字符和最后
     一个字符去掉后,打印出处理后的字符串
  2. 输入任意一个字符串,判断这个字符串是否是回文
    回文示例:
      上海自来水来自海上
      ABCCBA
      13831
    回文是指中心对称的文字
    任意输入一段文字,判断是否是回文

python 运算符优先级
  文档参见:
    python_base_docs_html/python运算符优先级.html

  
python3中常用于序列的函数
  len(x)    返回序列的长度
  max(x)    返回序列的最大值的元素
  min(x)    返回序列的最小值的元素

字符串编码转换函数:
  ord(c)   返回一个字符c的unicode编码值
  chr(i)   返回i这个值所对应的字符

练习:
  写一个程序,输入一段字符串,如果字符串不为空,则把字符串的
  第一个字符的编码值打印出来


整数转为字符串函数
  bin(i)    将整数转换为二进制的字符串
  oct(i)    将整数转换为八进制的字符串
  hex(i)    将整数转换为十六进制的字符串

字符串的构造函数:
  str(obj='')  将对象转换为字符串

python3 常用的字符串方法(method)
  语法:
    对象.方法名(方法传参)
  示例:
    'abc'.isalpha()  # 语法是对的
    123.isalpha()  # 错的,123是int类型,它没有isalpha方法
  文档参见:
    python_base_docs_html/str.html

小结:
  字符串 保存文字信息
  ''   ""  '''abc'''   """hello'''
  运算
    +  +=   *  *= 
    < <=  > >= == !=
    in , not in 
    索引和切片 [整数表达式], [:], [::]
  函数:
    len(x) max(x), min(x)
    ord(单个字符), chr(整数)
    bin(x), oct(x), hex(x), str(x)
  方法:
    s.count(...)
    s.strip()
    ... # 略







练习:
  1. 给出一个年份,判断是否为闰年并打印
    规则:
      每四年一闰,每百年不闰,每四百年又闰
    如:
      2016年  闰年
      2100年  不是闰年
      2400年  是闰年
    输入一个年份,打印这一年是否是闰年
  2. 输入一个字符串,把输入的字符串中的空格全部去掉,打印出处理
     后的字符串的长度和字符串的内容
  3. 输入三行文字,让这三行文字在一个方框居中显示
       (注:不要输入中文)
    如输入:
      hello!
      I'm studing python!
      I like python!
    打印如下:
     +---------------------+
     |       hello!        |
     | I'm studing python! |
     |    I like python!   |
     +---------------------+
        








