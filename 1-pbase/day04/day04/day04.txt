day03回顾:
  字符串 str
    保存文字信息(编码)
  表示方式:
    'abc'   "ABC"  '''abc''' """ABC"""
  三引号内的回车换行会自动转换为换行符 '\n'
  转义字符:
    \'   \"   \\  \n \r \t \a \v \b \0
    \0oo  两位八进制
    \xXX  两位十六进制
    \uXXXX 四位十六进制
    \uXXXXXXXX 八位十六进制

序列:
  有序排列
    字符串 str, 列表list, 元组tuple

原始字符串 raw 字符串
  让转义字符 \ 无效
    r'\a\b\c\d\e\f'
字符串的运算:
  +  +=   *   *=   
  <  <=  >  >=  == !=
  in , not in 判断一个字符或子字符串是否在另一个字符串内
    'a' in 'abcdefg'  # True
  索引
    s[5]    s[i+1]
  切片
    s[整数表达式start: 整数表达式stop: 整数表达式 step]

函数:
  len(x)  返回字符串的长度
  max(x)  返回序列的最大值的元素
  min(x)  ...

  ord(单个字符)  返回字符的编码值
  chr(整数)    返回编码值对应的字符

  bin(x)
  oct(x)
  hex(x)

  str(x)  字符串的构造函数

字符串的方法:
  s.isdigit()
  s.isalpha()
  s.count()
  s.find()
  s.index()
  s.center()
  s.strip()  # 去左右两端的某些字符(默认是空白字符)
  s.lstrip()
  s.rstrip()
  s.replace(old,new,count)
  s.startswith()
  s.endswith() 
  详见:
    >>> help(str)


day04 笔记

字符串的格式化表达式
  语法格式:
    格式化字符串 % 参数值
    或
    格式化字符串 % (参数值1, 参数值2, ....)
  说明:
    % 右侧为参数值,当有多个参数值是用括号()括起来,各参数间用
      逗号(,) 分隔,
    % 左侧为格式化字符串,中间的%开头的字符为占位符和类型码
  作用:
    生成一定格式的字符串
  示例:
    fmt = '姓名: %s, 年龄: %d'
    name = 'tarena'
    age = 15
    s = fmt % (name, age)  # s='姓名: tarena, 年龄: 15'
    name = '小张'
    age = 20
    s = fmt % (name, age)  # s='姓名: 小张, 年龄: 20'

格式化字符串中的占位符和类型码
  占位符和类型码        意义
    %s          字符串,使用str(x) 函数转换
    %r          字符串,使用repr(x) 函数转换
    %c          整数转为单个字符
    %d          整数转为十进制整数
    %o          整数转为八进制整数
    %x          整数转为十六进制整数(字符a-f小写)
    %X          整数转为十六进制整数(字符A-F大写)
    %e          指数型浮点数(e小写),如2.9e+10
    %E          指数型浮点数(E大写),如2.9E+10
    %f,%F       浮点十进制形式
    %g,%G       十进制形式浮点或指数浮点自动转换
    %%          等同于一个%字符

占位符和类型码之间的格式语法 
  % [- + 0  宽度.精度]  类型码
    注 :[] 里的内容可以省略不写
  
  -    左对齐(默认为右对齐)
  +    显示正号
  0    左侧空白位置补零
  宽度  整个数据输出的宽度(字符数)
  精度  保留小数点后多少位(默认为6位)

示例:
  "%d"  % 123      # '123'
  '%10d' % 123     # '       123'
  '%010d % 123     # '0000000123'
  '%-10d' % 123    # '123       '
  '%+10d' % 123    # '      +123'
  '%10s' % 'ABC'   # '       ABC'
  '%f' % 3.1415926535897123  # '3.141593'
  '%.10f' % 3.1415926535897123  # '3.1415926536'
  '%7.2f'  % 3.1415926535897123  # '   3.14'
  '%+7.2f'  % 3.1415926535897123  # '  +3.14'
  '%-+7.2f'  % 3.1415926535897123  # '+3.14  '

练习:
  写一个程序,输入三行文字,让这三行文字依次以20个字符的宽度
  右对齐输出
  如:
    请输入第1行: hello china
    请输入第2行: tanena
    请输入第3行: a
  打印如下:
             hello china
                  tanena
                       a

  做完上题后再思考:
    能否以最长的字符串长度进行右对齐显示(左侧填充空格)




循环语句 loop statement
  两种循环语句:
    while 语句
    for 语句
问题:
  写一个程序,输入一个整数n,打印如下内容
    这是第 1 行
    这是第 2 行
    这是第 3 行
    ...
    这是第 n 行
  如何让一条语句或多条语句重复执行多次? 如果i是一个变量
  i = 1
  print('这是第', i, '行')
  i += 1
  print('这是第', i, '行')
  i += 1
  print('这是第', i, '行')
  i += 1
  print('这是第', i, '行')
  i += 1
  print('这是第', i, '行')
  i += 1


while 语句
  作用:
    根据一定条件,重复执行一条语句或多条语句
  语法:
    while 真值表达式:
        语句块1 (*此部分的语句可能会重复执行多次)
    else:
        语句块2
  说明:
    1. 先执行真值表达式,测试布尔值为True或False
    2. 如果测试值为True,则执行语句块1,然后再返回到第1步,
       重复执行进行测试
    3. 如果真值表达式测试值为False,则执行else子语句中的
       语句块2,然后结束此while语句,如果没有else子句,则直接
       结束此while语句的执行
    4. else 子部部分可以省略
  示例见:
    while.py
    while2.py



练习:
  1. 写程序打印 1~20的整数
  2. 写程序,打印1~20的整数,打印在一行内
      1 2 3 4 5 6 7 8 ...... 19 20
  3. 写程序,打印1~20的整数,每行五个,打印四行,如:
      1 2 3 4 5
      6 7 8 9 10
      11 12 ...
      ...
    提示:  可以将if语句嵌入到while语句中

  4. 写一个程序,输入一个开始的整数存于begin变量中
     输入一个结束的整数,存于end 变量中
     打印从 begin 到 end(不包含 end) 的每个整数,
     打印在一行内,
     如:
       请输入: 8
       请输入: 20
     打印:
       8 9 10 11 12 ..... 19 20
    附加思考:
      如何实现每5个打印在一行内,打印多行?
      提示:  多加一个变量来记录打印的个数???

  5. 写程序,计算:
     1 + 2 + 3 + 4 + .....+ 99 + 100 的和,
    并打印这个和是多少?
     


练习:
  输入一个整数n,打印一个宽度和高度都为n个字符的长方形
  如:
    请输入: 4
  打印:
    ####
    #  #
    #  #
    ####
  如:
    请输入: 6
  打印:
    ######
    #    #
    #    #
    #    #
    #    #
    ######



while 语句注意事项:
  1. 要控制循环真值表达式的值来防止死循环
  2. 通常用真值表达式内的循环变量来控制循环的条件
  3. 通常在循环的语句块内改变循环变量来控制循环的次数和
     变量的走向

while 语句嵌套
  while语句本身是语句,和其它语句一样,可以嵌套到任何复合语句中

  示意:
    while 真值表达式:
        ...
        while 真值表达式2:
            ...
        else:
            ....
        ...
    ...
  示例见:
    while_embed.py

练习:
  输入一个数,打印指定宽度的正方形
    如:
      请输入: 5
    打印:
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
    如:
      请输入: 3
    打印:
      1 2 3
      1 2 3
      1 2 3




练习:
  用while语句实现打印三角形,输入一个整数,表示三角形的宽度
  和高度,打印出相应的三角形
    如:
      请输入三角形的宽度: 4
    1) 打印如下三角形
      *
      **
      ***
      ****
    2) 打印如下三角形:
         *
        **
       ***
      ****
    3)  打印如下三角形:
      ****
       ***
        **
         *
    4)  打印如下三角形:
      ****
      ***
      **
      *



break 语句
  问题:
    如果在循环过程中,不想再继承此循环语句的执行,怎么办?
  作用:
    用于循环语句(while,for语句)中,用来终止当前循环语句的执行
  说明:
    当break语句执行后,此循环语句break之后的语句将不再执行
    break 语句通常和if语句组合使用
    break 语句终止循环时,循环语句的else子句将不会被执行
    break 语句只能终止当前循环语句的执行,如果有循环嵌套时,不
       会跳出嵌套的外重循环
    break 语句只能在循环语句(while或for语句)内部使用 
  示例:
    break.py


死循环
  死循环是指循环条件一直成立的循环
  死循环通常用break语句来终止循环
  死循环的else子句永远不会执行
  死循环经常用在循环次数难以确定的循环中

示例见:
  death_loop.py
  



练习:
  1. 打印 0 ~ 30 范围内的所有偶数(能被2整除的数)
  2. 写程序用while 语句生成如下的字符串,并打印出来
     1) 'ABCD........XYZ'
     2) 'AaBbCcDd..........XxYyZz'
  3. 写程序求:
    1/1 + 1/3 + 1/5 + 1/7 + ...... + 1/99 的和
  4. 写程序求:
    1/1 - 1/3 + 1/5 - 1/7 + .......+ (+-)1/(2*n-1)的和
    1) 求当n取1000000时这个算式的和
    2) 求当n取1000000时这个算式的和乘4是多少
       (答案: 3.1415....)
  5. 打印九九乘法表(需用到循环嵌套)
    1x1=1
    1x2=2 2x2=4
    1x3=3 2x3=6 3x3=9
    ....
    1x9=9 ................... 9x9=81

