day15回顾
  生成器
    能够动态提供数据的对象(现用现生成)
    两种生成器:
      生成器函数
        含有yield语句的函数为生成器函数,此函数调用将返回生成器
        生成器是可迭代对象
            def myyield():
                yield 1
                yield 3
            next(it)  函数将会让生成器函数执行,
      生成表达式
        (表达式 for 变量列表 in 可迭代对象 if 真值表达式)
  字节串和字节数组
    字节串 bytes (不可变)
      创建：
        b'' , b"", b'''''', b"""""", b'ABCD', b'\xA1'
        bytes(), bytes(100), bytes(range(256)),
        bytes('ABC中文', 'utf-8')
    字节数组 bytearray (可变)
        bytearray(), bytearray(100),
        bytearray(range(256)), bytearray('ABC中文', 'utf-8')

    运算:
      + += * *=
      < <= > >= == !=
      in / not in 
      索引和切片(注: 字节数组支持索引和切片赋值操作)
    内建函数:
      len(x), max(x), min(x), sum(x), any(x), all(x)
    字节数组的方法:
       B.clear()
       B.append(n)
       B.remove(value)
       B.reverse()
       B.decode()
       B.find()

  文件的读取操作
    长期存储数据
    文件的操作:
       打开文件
       读/写文件
       关闭文件
    打开函数:
      f = open(文件路径名, mode='rt')  返回文件流对象
              # 绝对路径或相对路径字符串
    关闭方法:
      f.close()
    文本文件读方法:
      f.read(字符数或字节数=-1)
      f.readline()  读取一行，以换行符'\n'作为结束符
      f.readlines() 读取多行，以换行符'\n'分隔,形成字符串
                    列表返回


文本文件的写操作
  open(文件路径名, mode='rt')
  mode 模式字符串的含义
    r    读read
    t    文本text
    w    写write
    x    创建新文件，如果文件存在则报错
    a    追加append
    详见文档:
      python_base_docs_html/文件.html
  写方法:
    f.write()
    f.writelines()
  示例见:
    file_write.py
    file_write_x.py
    file_write_a.py

文本文件操作
  模式字符:
    't' (默认)
  说明:
    1. 对文本文件的读写，需要用字符串(str) 进行读取和写入操作
    2. 默认文件中存储的都为字符数据，在读写中会自动进行编解码
       转换操作
    3. 以行为单位分隔，在python内部统一用'\n' 作为换行符进行
       分隔
  各操作系统的换行符:
    Linux换行符: '\n'
    Windows换行符: '\r\n'
    旧的Macintosh换行符: '\r'
    新的 Mac OS X 换行符: '\n'

文本文件的迭代读取
  文件流对象是可迭代对象，迭代过程中将以换行符'\n' 作为分隔符
  依次获取
  示例:
    f = open('./mynote.txt')
    for line in f:
        print(line)


练习:
  写一个函数,要求把一个字典组成的列表(学生信息列表)，写入
      文件si.txt中
  要求:
    内容是每个学生的信息写在一行内,每个信息之间用逗号分隔开
  如:
    def save_to_file(L):
        ....

    L = [dict(name='xiaozhang', age=20, score=100),
         dict(name='xiaoli', age=18, score=98)
        ]
    save_to_file(L)
    文件si.txt的内容是:
     xiaozhang,20,100
     xiaoli,18,98


标准输入输出文件
  sys.stdin  标准输入文件(ctrl + d 输入文件结束符)
  sys.stdout  标准输出文件
  sys.stderr   标准错误输出文件
  模块名: sys

  注:  标准文件不需要打开和关闭就可以使用
  示例见:
    stdout.py

思考:
  print() 函数是如何实现的?
    能否自己实现一个myprint函数与内建功能相同
  如:
    print(*args, sep=' ', end='\n', file=sys.stdout, 
           flush=False)
    


二进制文件操作
  二进制文件操作模式字符:
     'b'
  说明:
    1. 默认文件中存储的都是以字节(byte)为单位的数据，通常有人为规
    定的格式
    2. 对二进制文件的读写操作需要用字节串(bytes) 进行操作
  什么是二进制文件
    文件中以字节(byte)为单位存储和读写操作，不以字节串为单位
    进行读写的文件操作方式

读方法:
  F.read()
    对于文本文件，F.read()返回类型为字符串(str)
    对于二进制文件,F.read() 返回类型为字节串(bytes)
写方法:
  F.write(x)
     二进制模式时，x必须是字节串(bytes)
     文件模式时，x必须是字符串(str)
  示例见:
    binary_file_write.py
    binary_file_read.py


F.tell() 方法
  作用:
    返回当前文件的读写位置(从文件头以字节为单位的整数)
  见:
    tell.py

F.seek方法
  作用:
    设置文件的读写位置
  格式:
    F.seek(偏移量, whence=相对位置)
      偏移量
        大于0的数代表向文件末尾方向移动
        小于0代表向文件头方向移动
      相对位置
        0 代表从文件头开始偏移
        1 代表从当前读写位置开始偏移
        2 代表从文件尾开始偏移

  示例见:
    seek.py

F.flush方法
  作用:
    清空缓冲区
  格式:
    F.flush()
  示例见:
    flush.py

文件操作小结:
  二种打开模式:
    文本文件方式(以字符串为单位进行操作，自动编码解码)
        't'
    二进制文件方式(字节串为单位进行操作, 不进行编解码)
        'b'
  二种IO操作(input读, output写)
    读操作: 'r'
      F.read()
      F.readline()
      F.readlines()
    写操作: 'w', 'x', 'a'
      F.write(x)
      F.writelines(x)
  文件的关闭:
    F.close()
  文件读写位置的定位操作:
    F.tell()
    F.seek()
  清空缓冲区操作:
    F.flush()






汉字编码
  国标系列:
    GB18030(收录27533个汉字, 二字节或四字节编码)
       GBK(收录21003个汉字,二字节编码)
          GB2312(收录6763个汉字+682个全角符号, 二字节编码)
    (Windows常用)
  国际标准:
    Unicode32(32位表示的文字编码)
        Unicode16(16位表示的文字编码)
    (Linux / Mac OS X / IOS / Android常用)
UTF-8
    UTF-8(8-bit Unicode Transformation Format)
       0x0000 ~ 0x007F     一字节编码
       0x0080 ~ 0x07FF     二字节编码
       0x0800 ~ 0xFFFF     三字节编码（中文落在此区)

问题:
  十个汉字点多少个字节?
  
python 编码转换字符串:
  'gb2312'
  'gbk'
  'gb18030'
  'utf-8'
  'ascii' 
  用于s.encode(x) 和 b.decode(x)中
  如:
    s = '十个汉字点多少个字节'
    print(s.encode('gbk'))
    print(s.encode('utf-8'))


编码注释:
  在源文件的第一行或第二行写入如下内容为编码注释
    # -*- coding:gbk -*-
    或
    # -*- coding:utf-8 -*-
  作用:
    指示python3解释执行器，当前文件的编码方式是什么
  示例见:
    hello_gbk.py


练习:
  修改学生信息管理程序，
    再加入一个保存的功能:
      | 10) 保存信息到文件(si.txt)  |
    实现保存当前的所有数据

练习:
  写程序，实现复制文件的功能:
    如:
      请输入源文件: /home/tarena/day16.txt
      请输入目标文件: /home/tarena/abc.txt
    输出:
      复制文件成功
    要求:
      1. 要考虑文件关闭的问题
      2. 要考虑大文件的问题
      3. 要能复制二进制文件
  答案参见:
    mycopy.py






