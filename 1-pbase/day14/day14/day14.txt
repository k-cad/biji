day13回顾
自定义模块
  文件名: 标识符.py
       hello.py
  自定义模块内的全局变量将成为此模块的属性
    函数, 数据, 类
  模块的搜索顺序:
    1. 内建模块
    2. 当前工作目录
    3. sys.path提供的路径
  
  编译过程
    .py   ----> .pyc  ----> python3

  模块的属性:
    __doc__ 属性
       绑定文档字符串
    __file__ 属性
       绑定当前模块文件所在的路径
    __name__ 属性
       绑定模块名(主模块此属性绑定'__main__')

  __all__ 列表
    __all__ = ['name1', 'name2', ...]
    限制from import * 语句只导入此列内的属性

  隐藏属性:
    以下划线(_) 开头的全局变量是隐藏属性
       限制from import * 语句的导入

包
   以文件夹形式进行管理模块的方式

导入:
   import 语句
   from import 语句
   from import * 语句

   如 ：
     import mypack.games.contra as contra
     from mypack.games.contra import play
     from mypack.games.contra import *

  搜索顺序
     1. 当前工作目录
     2. sys.path提供的路径

__init__.py
   编写包的内容

__init__.py 里 __all__ 列表
   记录当用from import * 导入时，导入哪儿些子包或模块

包的相对导入:
  from ..menu import show_menu
  from ..office.word import save
  from .games import *

随机模块 random 模块
   




day14 笔记

异常(基础)  exception
  什么是错误
    错误是指由于逻辑或语法待导致一个程序无法正常执行的问题
  错误的特点:
     无法预知

  什么是异常
    异常是程序出错时标识的一种状态
    当异常发生时，程序不会再向下执行，而转去调用此函数的地方待
      处理此错误并恢复为正常状态
  作用:
    用作信号，通知上层调用者有错误产生需要处理

try 语句的两种语法:
  try-except 语句
  try-finally 语句

try-except 语句
  语法:
    try:
        可能触发异常的语句
    except 错误类型1 [as 变量1]:
        异常处理语句1
    except 错误类型2 [as 变量2]:
        异常处理语句2
    except (错误类型3, 错误类型4) [as 变量3]:
        异常处理语句3
    ...
    except: 
        异常处理语句other
    else:
        未发生异常语句
    finally:
        最终语句
  作用:
    偿试捕获异常错误，得到异常通知，将程序由异常流程转为正常流程
    并继续执行
  说明:
    as 子句是用于绑定错误对象的变量，可以省略
    except 子句可以有一个或多个，但至少要有一个
    else 子句最多只能有一个，也可以省略不写
    finally 子句最多只能有一个，也可以省略不写
  示例见:
    try_except.py 

  
练习:
  写一个函数 get_score() 来获取学生输入的成绩(0~100的整数),
  如果输入出现异常，则此函数返回0,否则返回用户输入的成绩
    如:
        def get_score():
            ...  # 此处自己实现
        
        score = get_score()
        print("学生的成绩是", score)

python3 全部的错误类型
  参见文档:
    python_base_docs_html/python全部的异常类型.html

  查看全部的类型，详见:
    >>> help(__builtins__)





try-finally语句
  语法:
    try:
        可能触发异常的语句
    finally:
        最终语句
  说明:
    finally 子句不可以省略
    一定不存在except子句
  作用:
    1. 通常用try-finally 语句来做触发异常时必须要处理的事
       情,无论异常是否发生，finally 子句都会被执行
  注:
    try-finally 语句不会改变程序的(正常/异常) 状态
  示例见:
    try_finally.py
    





raise 语句
  作用:
    触发一个错误，让程序进入异常状态
    发送错误通知给调用者
  语法:
    raise 异常类型
    或
    raise 异常对象
    或
    raise  # 重新触发上一次异常
  示例见:
    raise.py
    raise2.py
    raise3.py
    raise4.py

练习:
  写一个函数 get_age 用来获取一个人的年龄信息
    此函数规定用户只能输入1~140之间的整数，如果用户输入其它
    的数则直接触发ValueError类型的错误！
  如:
    def get_age():
        ...  # 此处的逻辑自己实现
    try:
       age = get_age()
       print("用户输入的年龄是:", age)
    except ValueError:
        print("用户输入的不是1~140的整数，获取年龄失败")


assert 语句(断言语句)
  语法:
    assert 真值表达式, 错误数据(通常是字符串)
  作用:
    当真值表达式为False时，用错误数据创建一个AssertionError
    类型的错误，并进入异常状态
  等同于:
    if bool(真值表达式) == False:
        raise AssertionError(错误数据)
  示例见:
    assert.py

为什么要用异常处理机制
  在程序调用层数较深时，向主调函数传递错误信息需要层层return
  返回比较麻烦，所以需要异常处理机制

示例见:
  exception.py

异常小结:
  四条语句:
    try-except      捕获异常，把程序由异常状态转回正常状态
    try-finally     执行必须要执行的语名
    raise           发送错误通知
    assert          根据条件发送AssertionError类型的错误通知



迭代器 Iterator
  什么是迭代器
    迭代器是访问可迭代对象的工具
    迭代器是指用iter(obj) 函数返回的对象(实例)
    迭代器可以用next(it) 函数获取可迭代对象的数据
  函数
    iter(iterable)  从可迭代对象中返回一个迭代器，iterable
             必须是一个能够提供一个迭代器的对象
    next(iterator)   从迭代器iterator中获取下一个记录，如果
             无法获取下一条记录，则触发StopIteraton异常

  说明:
    迭代器只能往前取值，不会后退
    用iter函数可以返回一个可迭代对象的迭代器

  示例:
    L = [2, 3, 5, 7]
    it = iter(L)  # it 绑定一个能访问L列表的迭代器
    print(next(it))  # 2  通过it 从可迭代对象中提取一个数据
    print(next(it))  # 3
    print(next(it))  # 5
    print(next(it))  # 7
    print(next(it))  # StopIteration
  
    # 访问range
    it = iter(range(1, 10, 3))
    print(next(it))  # 1
    print(next(it))  # 4
    print(next(it))  # 7
    print(next(it))  # StopIteration

迭代器的用途
  迭代器对象能用next函数获取下一个元素，可以用迭代器对
  任何的可迭代对象进行访问和遍历

  示例见:
    iterator.py

练习:
  有一个集合:
    s = {'唐僧', '悟空', '八戒', '沙僧'}
  用for语句来遍历所有元素如下:
    for x in s:
        print(x)
    else:
        print("遍历结束")
  请将上面的for语句改写为while和语句迭代器实现




练习:
  1. 一个球从100米高空落下，每次落地后反弹高度为原高度的一半，再
    落下,写程序算出:
       1) 皮球在第10次落地后反弹的高度
       2) 皮球在第10次落地反弹后共经历多少米路程
  2. 分解质因数.输入一个正整数，分解质因数
    如:
      输入: 90
    打印：
    　　90 = 2*3*3*5
    (质因数是指最小能被原数整数的素数(不包括1))
  3. 修改原学生信息管理程序，加入异常处理语句，让程序在任何情
  　　况下都能按逻辑正常执行(不至于崩溃退出)
    如: 输入年龄和成绩时输入字母会崩溃
　4. 打印杨辉三角，只打印6层
       1
      1 1
     1 2 1
    1 3 3 1
   1 4 6 4 1
 1 5 10 10 5 1


