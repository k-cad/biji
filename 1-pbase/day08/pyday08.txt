day07 
    两个容器
      元组 tuple(不可变的序列)
      字典 dict(可变的无序容器)
序列：
    str list tuple bytes bytears
构造函数
    tuple()  tuple(可迭代对象)
    
day08
集合 set
    集合是可变的的容器
    集合内的数据对象是唯一的(不能重复多次)
    集合是无序的储存结构，集合中的数据没有先后顺序
    集合内的元素必须是不可变对象
    集合是可迭代对象(可以用for遍历)
    集合是相当于只有键，没有值的字典(键则是集合的数据)
创键空集合
    set()
创键非空集合
    set={1,2,3}
集合的构造函数
    set() 不能用{}来创键空集合
    set(iterable) 用可迭代对象创键一个新的集合对象
示例：
    s=set()
    s={1,2,3,4}
    s=set('ABC')#{'C','B','A'}
    s=set('AABBCC')#{'C','B','A'}
    s=set([1,2,3,4])
    s={1,2,[3,4],5}#集合中不能放字典或列表
    s={1,2,{3,4},5}#报错 集合中不能放可变对象
集合的运算
    交集&，并集|，补集-，对称补集^,子集<,超集>
    -生成两个集合的补集
    s1={1,2,3}
    s2={2,3,4}
    s3=s1-s2#生成属于s1,但不属于s2的元素的集合
    ^生成两个集合的对称补集
    s1={1,2,3}
    s2={2,3,4}
    s3=s1^s2#s3={1,4}
    > 判断一个集合是另一个集合的超集
    < 判断一个集合是另一个集合的子集
      s1={1,2,3}
      s2={2,3}
      s1>s2 Ture,s1为s2的超集
      s2<s1 Ture,s2为s1的子集
    += != 集合相同或不同
      s1 = {1,2,3}
      s2 = {2,3,1}
      s1 == s2 #Ture 相同
      s1 != s2 #False
    >= <= 超集或相同 子集或相同

in / not in
    等同于字典，in用于集合中，当某个值存在于集合中返回Ture,
    否则返回False
    not in 与 in 返回值想发

    说明：
        集合的in / not in 运算符查找运算速度比较块

能用于集合的内建函数
    len(x) max(x) min(x) sum(x) any(x) all(x) 
集合是可迭代对象
    for 语句
集合推导式
    集合推导式是用可迭代对象创建复合的表达式
    语法：
        {表达式 for 变量 in 可迭代对象 [if 真值表达式]}
    示例：
        s={x**2 for x in range(1,10)}
    集合推导式可以嵌套
        语法同列表推导式的相同
固定集合 frozenset
    固定集合是不可变得，无序的，含有唯一元组的集合
    作用：
        固定集合可以作为字典的键，还可以作为集合的值
    创建固定集合构造函数 frozenset
        frozenset()  创建一个空的集合的对象
        frozenset(iterable)用可迭代对象创建一个新的固定集合对象
    示例：
        fz=frozenset()
        fz=frozenset(range(10))
        fz=frozenset([1,2,3,4,5])
        d={frozenset({1,2,3}):'集合1,2,3'}
    固定集合的运算
        & 交集
        | 并集
        - 补集
        ^ 对称补集
        < 子集
        > 超集
        <= >= == !=
        in / not in
        (以上运算规则等同于set中的规则)
    固定集合的方法
        相当于集合的全部运算方法去掉修改集合的方法


阶段回顾：
    数据类型：
        不可类型：
            数字：bool int float complex
            容器：str tuple frozenset bytes
        可变类型：
            list,dict,set,bytearray
        值：
           None False Ture 
    表达式：
        1
        1+2
        print('hello')
        max('ABC')+min('123')
        条件表达式：x if x > y else y
        全部的推导式：列表，字典，集合推导式
    语句：
        表达式语句：
            print('hello')
            ''AB''
        赋值语句：
            a=100
            a=b=c=200
            x,y=100,200
            L[1]=200
            d['key']='键‘
        del语句
        if语句
        while语句
        for语句
        break语句
        continue语句
        pass语句
    函数：
        容器相关：
            len(x),max(x),min(x),sum(x),any(x),all(x)
        构造函数：
            bool(x)
            int(x)
            float(x)
            complex(r=0.0,j=0.0)
            str(x)
            list(x)
            tuple(x)
            dict(x)
            set(x)
            frozenset(x)
        数值型 函数：
            abs(x)
            round(x)
            pow(x,y,z=None)
        字符串相关
            bin(x)
            oct(x)
            hex(x)
            chr(x)
            ord(x)
        可迭代对象相关
            range(star,stop,step)
            reversed(x)
            sorted(x,reverse=False)
        输入输出相关：
            input(x)
            print(...)
        其他：
            type(x)
            id(x)

        
练习：
    经理：曹操，刘备，孙权
    技术员： 曹操，孙权，张飞，关羽
    用集合求：
        1,既是经理又是技术员的有谁
        2,是经理，但不是技术员
        3,是技术员，不是经理
        4,张飞是经理吗
        5,身兼一职的人有谁
        6,经理和技术员一共有几人

集合的方法：
    python_base_docs_html

function
  函数是可以重复执行的语句块，可以重复使用
  函数是面向过程编程的最小单位
  作用：
      1,用于封装语句块，提高代码的重用性
      2,定义用户级别的函数
def 语句
    语法：
        def 函数名(形参列表)
        语句块(代码块)
    说明：
        1,函数名就是语句块的名称
        2,函数名的命名规则与变量名是相同的(函数名必须为标识符)
        3,函数名是一个变量(不要轻易对其赋值)
        4,函数有自己的名字空间，在函数外部不可以访问函数内部的变量
          在函数内部可以访问函数外部的变量，让函数处理外部数据，需要
          传入一些语句
        5,函数如果不需要传入参数，则参数列表可以为空
        6,语句部分不能为空，如果为空需要填充pass语句
    作用：
        用于创建函数，用函数名这个变量绑定这个函数
    函数的调用表达式
        函数名(实际调用传递参数)
        说明：
            函数调用是一个表达式
            如果没有return语句，函数执行完毕后返回None对象
    return 语句
      语法：
          return[表达式]
        注：[]代表其中的内容可以省略
      作用：
          用于函数中，结束当前函数的执行，返回到调用该函数的地方
          同时返回一个对象的引用关系
      说明：
          1,return 语句先执行右侧的表达式，再将表达式的执行结果送回给当前
           函数的调用者
          2,return 语句右侧的表达式可以省略，省略后相当于return None
          3,如果函数内部没有return语句，则函数执行完最后一条语句后返回None
           (相当于在最后一条语句之后加了return None)
