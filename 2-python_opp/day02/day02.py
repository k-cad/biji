1.多态
  1)事物除了共性外，还具有各自的特性(个性)
    多态就用来处理事物的个性
  2)多态能够在不影响父类行为(不修改父类代码
    的情况下，进行功能的扩展和变更)
  3)使程序(软件设计)更具灵活性
2.方法的重写:父类中定义过的方法子类中重新定义
3.多态的实现:通过在子类中重写父类的方法实现多态
4.面向对象的技术特征
  1)构造和析构
    a)构造方法
      -名称:在Python中，固定为__init__
      -作用:是为对象创建属性，并且赋予初始值
      -调用时机:对象被创建(实例化)时自动调用
      -如果在类中未定义，Python会给出默认的构造方法
      -在继承关系中，如果父类定义了__init__方法
       在子类的构造方法中，必须调用父类的构造方法
    b)析构方法
      -名称:__del__
      -调用时机:对象被销毁时自动调用
               del obj,局部变量退出作用域
               程序退出
      -作用:对象销毁时,执行清理操作
  2)多重继承:一个类有多个父类
    -如何实现多继承:定义类的时候,继承自多个父类,父类之间用逗号隔开
    -语法格式:
        class 类名称(父类1，父类2,...):
             语句块
    -通过多重继承,子类具有所用父类的特征和行为
    -如果多个父类具有相同的方法(或属性名称),
     通过类的__mor__属性中记录的顺序进行查找
     MOR(Method Resolution Order)
     总的原则按照由上至下，从左至右(继承列表中前后)
     进行查找,直到object类,如果都没有找到就报错
  3)object类:所用类的总父类，如果定义类时候，没有
             指定父类，则默认从object类继承
            类的父类可以通过__base__属性查看
  4)super()和issubclass()
    - super()函数
       作用:返回绑定的父类
           有时候需要显式调用父类方法
           就使用super()函数
       格式:super(type,ojb)返回obj对象父类
            super()返回当前对象父类
                   只能在类的方法中调用
    -issubclass:判断一个类是否是另一个类的子类，
                如果是返回True，不是返回False
        格式:issubclass(cla,class_or_tuple)    
5.函数重写
  1)对象转字符函数的重写
   -str:将对象转换成人阅读的字符串
        重写__str__()
   -repr:返回字符串,给python解释器阅读
         即通过eval(repr(obj))能够还原obj对象，
         重写__repr__()
   -当调用str(obj)将对像转换成字符串时，
    其搜索顺序为：
    +优先查找obj.__str__()方法(包括父类)
    +如果上一步不存在，则调用obj.__repr__
    +如果上一步不存在，则调用object.__repr__()
  2)内建函数重写
    -abs()函数:重写__abs__()
    -len()函数:重写__len__()
    -reversed()函数:重写__reversed__()
    -round()函数:重写__round__()
    示例见 Mylist.py 
  3)数值转换函数重写
    -int():重写__int__()
    -float():重写__float__()
    -bool():重写__bool__()
    -complex():重写__complex__()
    示例见 my_number.py
6.属性管理函数：操作对象属性
  1)getattr:获取对象的属性值
    -格式:getattr(obj,name[,default])
    -作用:getattr(x,"y")等同于 x.y表达式
    示例见：my_nember.py
  2)setattr:设置对象属性值
    -格式:setattr(obj,name,value)
    -作用:setattr(x,"y",'zzz') 等同于x.y = "zzz"表达式
  3)hasattr:判断有没有某个属性值
    -格式:hasattr(obj,name)
    -返回:布尔类型，有—True 没有—False
  4)delattr:删除对象某个属性值
    -格式:delattr(obj,name)
    -作用:delattr(x,"y")等同于 del x.y表达式
    

